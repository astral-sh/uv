{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CombinedOptions",
  "description": "Metadata and configuration for uv.",
  "type": "object",
  "properties": {
    "allow-insecure-host": {
      "description": "Allow insecure connections to host.\n\n Expects to receive either a hostname (e.g., `localhost`), a host-port pair (e.g.,\n `localhost:8080`), or a URL (e.g., `https://localhost`).\n\n WARNING: Hosts included in this list will not be verified against the system's certificate\n store. Only use `--allow-insecure-host` in a secure network with verified sources, as it\n bypasses SSL verification and could expose you to MITM attacks.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/TrustedHost"
      }
    },
    "build-backend": {
      "description": "Configuration for the uv build backend.\n\n Note that those settings only apply when using the `uv_build` backend, other build backends\n (such as hatchling) have their own configuration.",
      "anyOf": [
        {
          "$ref": "#/definitions/BuildBackendSettings"
        },
        {
          "type": "null"
        }
      ]
    },
    "build-constraint-dependencies": {
      "description": "PEP 508-style requirements, e.g., `ruff==0.5.0`, or `ruff @ https://...`.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "cache-dir": {
      "description": "Path to the cache directory.\n\n Defaults to `$XDG_CACHE_HOME/uv` or `$HOME/.cache/uv` on Linux and macOS, and\n `%LOCALAPPDATA%\\uv\\cache` on Windows.",
      "type": [
        "string",
        "null"
      ]
    },
    "cache-keys": {
      "description": "The keys to consider when caching builds for the project.\n\n Cache keys enable you to specify the files or directories that should trigger a rebuild when\n modified. By default, uv will rebuild a project whenever the `pyproject.toml`, `setup.py`,\n or `setup.cfg` files in the project directory are modified, or if a `src` directory is\n added or removed, i.e.:\n\n ```toml\n cache-keys = [{ file = \"pyproject.toml\" }, { file = \"setup.py\" }, { file = \"setup.cfg\" }, { dir = \"src\" }]\n ```\n\n As an example: if a project uses dynamic metadata to read its dependencies from a\n `requirements.txt` file, you can specify `cache-keys = [{ file = \"requirements.txt\" }, { file = \"pyproject.toml\" }]`\n to ensure that the project is rebuilt whenever the `requirements.txt` file is modified (in\n addition to watching the `pyproject.toml`).\n\n Globs are supported, following the syntax of the [`glob`](https://docs.rs/glob/0.3.1/glob/struct.Pattern.html)\n crate. For example, to invalidate the cache whenever a `.toml` file in the project directory\n or any of its subdirectories is modified, you can specify `cache-keys = [{ file = \"**/*.toml\" }]`.\n Note that the use of globs can be expensive, as uv may need to walk the filesystem to\n determine whether any files have changed.\n\n Cache keys can also include version control information. For example, if a project uses\n `setuptools_scm` to read its version from a Git commit, you can specify `cache-keys = [{ git = { commit = true }, { file = \"pyproject.toml\" }]`\n to include the current Git commit hash in the cache key (in addition to the\n `pyproject.toml`). Git tags are also supported via `cache-keys = [{ git = { commit = true, tags = true } }]`.\n\n Cache keys can also include environment variables. For example, if a project relies on\n `MACOSX_DEPLOYMENT_TARGET` or other environment variables to determine its behavior, you can\n specify `cache-keys = [{ env = \"MACOSX_DEPLOYMENT_TARGET\" }]` to invalidate the cache\n whenever the environment variable changes.\n\n Cache keys only affect the project defined by the `pyproject.toml` in which they're\n specified (as opposed to, e.g., affecting all members in a workspace), and all paths and\n globs are interpreted as relative to the project directory.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/CacheKey"
      }
    },
    "check-url": {
      "description": "Check an index URL for existing files to skip duplicate uploads.\n\n This option allows retrying publishing that failed after only some, but not all files have\n been uploaded, and handles error due to parallel uploads of the same file.\n\n Before uploading, the index is checked. If the exact same file already exists in the index,\n the file will not be uploaded. If an error occurred during the upload, the index is checked\n again, to handle cases where the identical file was uploaded twice in parallel.\n\n The exact behavior will vary based on the index. When uploading to PyPI, uploading the same\n file succeeds even without `--check-url`, while most other indexes error.\n\n The index must provide one of the supported hashes (SHA-256, SHA-384, or SHA-512).",
      "anyOf": [
        {
          "$ref": "#/definitions/IndexUrl"
        },
        {
          "type": "null"
        }
      ]
    },
    "compile-bytecode": {
      "description": "Compile Python files to bytecode after installation.\n\n By default, uv does not compile Python (`.py`) files to bytecode (`__pycache__/*.pyc`);\n instead, compilation is performed lazily the first time a module is imported. For use-cases\n in which start time is critical, such as CLI applications and Docker containers, this option\n can be enabled to trade longer installation times for faster start times.\n\n When enabled, uv will process the entire site-packages directory (including packages that\n are not being modified by the current operation) for consistency. Like pip, it will also\n ignore errors.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "concurrent-builds": {
      "description": "The maximum number of source distributions that uv will build concurrently at any given\n time.\n\n Defaults to the number of available CPU cores.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint",
      "minimum": 1
    },
    "concurrent-downloads": {
      "description": "The maximum number of in-flight concurrent downloads that uv will perform at any given\n time.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint",
      "minimum": 1
    },
    "concurrent-installs": {
      "description": "The number of threads used when installing and unzipping packages.\n\n Defaults to the number of available CPU cores.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint",
      "minimum": 1
    },
    "config-settings": {
      "description": "Settings to pass to the [PEP 517](https://peps.python.org/pep-0517/) build backend,\n specified as `KEY=VALUE` pairs.",
      "anyOf": [
        {
          "$ref": "#/definitions/ConfigSettings"
        },
        {
          "type": "null"
        }
      ]
    },
    "conflicts": {
      "description": "A list of sets of conflicting groups or extras.",
      "anyOf": [
        {
          "$ref": "#/definitions/SchemaConflicts"
        },
        {
          "type": "null"
        }
      ]
    },
    "constraint-dependencies": {
      "description": "PEP 508-style requirements, e.g., `ruff==0.5.0`, or `ruff @ https://...`.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "default-groups": {
      "description": "The list of `dependency-groups` to install by default.\n\n Can also be the literal `\"all\"` to default enable all groups.",
      "anyOf": [
        {
          "$ref": "#/definitions/DefaultGroups"
        },
        {
          "type": "null"
        }
      ]
    },
    "dependency-metadata": {
      "description": "Pre-defined static metadata for dependencies of the project (direct or transitive). When\n provided, enables the resolver to use the specified metadata instead of querying the\n registry or building the relevant package from source.\n\n Metadata should be provided in adherence with the [Metadata 2.3](https://packaging.python.org/en/latest/specifications/core-metadata/)\n standard, though only the following fields are respected:\n\n - `name`: The name of the package.\n - (Optional) `version`: The version of the package. If omitted, the metadata will be applied\n   to all versions of the package.\n - (Optional) `requires-dist`: The dependencies of the package (e.g., `werkzeug>=0.14`).\n - (Optional) `requires-python`: The Python version required by the package (e.g., `>=3.10`).\n - (Optional) `provides-extras`: The extras provided by the package.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/StaticMetadata"
      }
    },
    "dev-dependencies": {
      "description": "PEP 508-style requirements, e.g., `ruff==0.5.0`, or `ruff @ https://...`.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "environments": {
      "description": "A list of environment markers, e.g., `python_version >= '3.6'`.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "exclude-newer": {
      "description": "Limit candidate packages to those that were uploaded prior to the given date.\n\n Accepts both [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html) timestamps (e.g.,\n `2006-12-02T02:07:43Z`) and local dates in the same format (e.g., `2006-12-02`) in your\n system's configured time zone.",
      "anyOf": [
        {
          "$ref": "#/definitions/ExcludeNewer"
        },
        {
          "type": "null"
        }
      ]
    },
    "extra-index-url": {
      "description": "Extra URLs of package indexes to use, in addition to `--index-url`.\n\n Accepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/)\n (the simple repository API), or a local directory laid out in the same format.\n\n All indexes provided via this flag take priority over the index specified by\n [`index_url`](#index-url) or [`index`](#index) with `default = true`. When multiple indexes\n are provided, earlier values take priority.\n\n To control uv's resolution strategy when multiple indexes are present, see\n [`index_strategy`](#index-strategy).\n\n (Deprecated: use `index` instead.)",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/IndexUrl"
      }
    },
    "find-links": {
      "description": "Locations to search for candidate distributions, in addition to those found in the registry\n indexes.\n\n If a path, the target must be a directory that contains packages as wheel files (`.whl`) or\n source distributions (e.g., `.tar.gz` or `.zip`) at the top level.\n\n If a URL, the page must contain a flat list of links to package files adhering to the\n formats described above.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/IndexUrl"
      }
    },
    "fork-strategy": {
      "description": "The strategy to use when selecting multiple versions of a given package across Python\n versions and platforms.\n\n By default, uv will optimize for selecting the latest version of each package for each\n supported Python version (`requires-python`), while minimizing the number of selected\n versions across platforms.\n\n Under `fewest`, uv will minimize the number of selected versions for each package,\n preferring older versions that are compatible with a wider range of supported Python\n versions or platforms.",
      "anyOf": [
        {
          "$ref": "#/definitions/ForkStrategy"
        },
        {
          "type": "null"
        }
      ]
    },
    "index": {
      "description": "The indexes to use when resolving dependencies.\n\n Accepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/)\n (the simple repository API), or a local directory laid out in the same format.\n\n Indexes are considered in the order in which they're defined, such that the first-defined\n index has the highest priority. Further, the indexes provided by this setting are given\n higher priority than any indexes specified via [`index_url`](#index-url) or\n [`extra_index_url`](#extra-index-url). uv will only consider the first index that contains\n a given package, unless an alternative [index strategy](#index-strategy) is specified.\n\n If an index is marked as `explicit = true`, it will be used exclusively for the\n dependencies that select it explicitly via `[tool.uv.sources]`, as in:\n\n ```toml\n [[tool.uv.index]]\n name = \"pytorch\"\n url = \"https://download.pytorch.org/whl/cu121\"\n explicit = true\n\n [tool.uv.sources]\n torch = { index = \"pytorch\" }\n ```\n\n If an index is marked as `default = true`, it will be moved to the end of the prioritized list, such that it is\n given the lowest priority when resolving packages. Additionally, marking an index as default will disable the\n PyPI default index.",
      "type": [
        "array",
        "null"
      ],
      "default": null,
      "items": {
        "$ref": "#/definitions/Index"
      }
    },
    "index-strategy": {
      "description": "The strategy to use when resolving against multiple index URLs.\n\n By default, uv will stop at the first index on which a given package is available, and\n limit resolutions to those present on that first index (`first-index`). This prevents\n \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the\n same name to an alternate index.",
      "anyOf": [
        {
          "$ref": "#/definitions/IndexStrategy"
        },
        {
          "type": "null"
        }
      ]
    },
    "index-url": {
      "description": "The URL of the Python package index (by default: <https://pypi.org/simple>).\n\n Accepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/)\n (the simple repository API), or a local directory laid out in the same format.\n\n The index provided by this setting is given lower priority than any indexes specified via\n [`extra_index_url`](#extra-index-url) or [`index`](#index).\n\n (Deprecated: use `index` instead.)",
      "anyOf": [
        {
          "$ref": "#/definitions/IndexUrl"
        },
        {
          "type": "null"
        }
      ]
    },
    "keyring-provider": {
      "description": "Attempt to use `keyring` for authentication for index URLs.\n\n At present, only `--keyring-provider subprocess` is supported, which configures uv to\n use the `keyring` CLI to handle authentication.",
      "anyOf": [
        {
          "$ref": "#/definitions/KeyringProviderType"
        },
        {
          "type": "null"
        }
      ]
    },
    "link-mode": {
      "description": "The method to use when installing packages from the global cache.\n\n Defaults to `clone` (also known as Copy-on-Write) on macOS, and `hardlink` on Linux and\n Windows.",
      "anyOf": [
        {
          "$ref": "#/definitions/LinkMode"
        },
        {
          "type": "null"
        }
      ]
    },
    "managed": {
      "description": "Whether the project is managed by uv. If `false`, uv will ignore the project when\n `uv run` is invoked.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "native-tls": {
      "description": "Whether to load TLS certificates from the platform's native certificate store.\n\n By default, uv loads certificates from the bundled `webpki-roots` crate. The\n `webpki-roots` are a reliable set of trust roots from Mozilla, and including them in uv\n improves portability and performance (especially on macOS).\n\n However, in some cases, you may want to use the platform's native certificate store,\n especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's\n included in your system's certificate store.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "no-binary": {
      "description": "Don't install pre-built wheels.\n\n The given packages will be built and installed from source. The resolver will still use\n pre-built wheels to extract package metadata, if available.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "no-binary-package": {
      "description": "Don't install pre-built wheels for a specific package.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/PackageName"
      }
    },
    "no-build": {
      "description": "Don't build source distributions.\n\n When enabled, resolving will not run arbitrary Python code. The cached wheels of\n already-built source distributions will be reused, but operations that require building\n distributions will exit with an error.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "no-build-isolation": {
      "description": "Disable isolation when building source distributions.\n\n Assumes that build dependencies specified by [PEP 518](https://peps.python.org/pep-0518/)\n are already installed.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "no-build-isolation-package": {
      "description": "Disable isolation when building source distributions for a specific package.\n\n Assumes that the packages' build dependencies specified by [PEP 518](https://peps.python.org/pep-0518/)\n are already installed.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/PackageName"
      }
    },
    "no-build-package": {
      "description": "Don't build source distributions for a specific package.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/PackageName"
      }
    },
    "no-cache": {
      "description": "Avoid reading from or writing to the cache, instead using a temporary directory for the\n duration of the operation.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "no-index": {
      "description": "Ignore all registry indexes (e.g., PyPI), instead relying on direct URL dependencies and\n those provided via `--find-links`.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "no-sources": {
      "description": "Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the\n standards-compliant, publishable package metadata, as opposed to using any local or Git\n sources.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "offline": {
      "description": "Disable network access, relying only on locally cached data and locally available files.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "override-dependencies": {
      "description": "PEP 508-style requirements, e.g., `ruff==0.5.0`, or `ruff @ https://...`.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "package": {
      "description": "Whether the project should be considered a Python package, or a non-package (\"virtual\")\n project.\n\n Packages are built and installed into the virtual environment in editable mode and thus\n require a build backend, while virtual projects are _not_ built or installed; instead, only\n their dependencies are included in the virtual environment.\n\n Creating a package requires that a `build-system` is present in the `pyproject.toml`, and\n that the project adheres to a structure that adheres to the build backend's expectations\n (e.g., a `src` layout).",
      "type": [
        "boolean",
        "null"
      ]
    },
    "pip": {
      "anyOf": [
        {
          "$ref": "#/definitions/PipOptions"
        },
        {
          "type": "null"
        }
      ]
    },
    "prerelease": {
      "description": "The strategy to use when considering pre-release versions.\n\n By default, uv will accept pre-releases for packages that _only_ publish pre-releases,\n along with first-party requirements that contain an explicit pre-release marker in the\n declared specifiers (`if-necessary-or-explicit`).",
      "anyOf": [
        {
          "$ref": "#/definitions/PrereleaseMode"
        },
        {
          "type": "null"
        }
      ]
    },
    "preview": {
      "description": "Whether to enable experimental, preview features.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "publish-url": {
      "description": "The URL for publishing packages to the Python package index (by default:\n <https://upload.pypi.org/legacy/>).",
      "type": [
        "string",
        "null"
      ],
      "format": "uri"
    },
    "pypy-install-mirror": {
      "description": "Mirror URL to use for downloading managed PyPy installations.\n\n By default, managed PyPy installations are downloaded from [downloads.python.org](https://downloads.python.org/).\n This variable can be set to a mirror URL to use a different source for PyPy installations.\n The provided URL will replace `https://downloads.python.org/pypy` in, e.g., `https://downloads.python.org/pypy/pypy3.8-v7.3.7-osx64.tar.bz2`.\n\n Distributions can be read from a\n local directory by using the `file://` URL scheme.",
      "type": [
        "string",
        "null"
      ]
    },
    "python-downloads": {
      "description": "Whether to allow Python downloads.",
      "anyOf": [
        {
          "$ref": "#/definitions/PythonDownloads"
        },
        {
          "type": "null"
        }
      ]
    },
    "python-downloads-json-url": {
      "description": "URL pointing to JSON of custom Python installations.\n\n Note that currently, only local paths are supported.",
      "type": [
        "string",
        "null"
      ]
    },
    "python-install-mirror": {
      "description": "Mirror URL for downloading managed Python installations.\n\n By default, managed Python installations are downloaded from [`python-build-standalone`](https://github.com/astral-sh/python-build-standalone).\n This variable can be set to a mirror URL to use a different source for Python installations.\n The provided URL will replace `https://github.com/astral-sh/python-build-standalone/releases/download` in, e.g., `https://github.com/astral-sh/python-build-standalone/releases/download/20240713/cpython-3.12.4%2B20240713-aarch64-apple-darwin-install_only.tar.gz`.\n\n Distributions can be read from a local directory by using the `file://` URL scheme.",
      "type": [
        "string",
        "null"
      ]
    },
    "python-preference": {
      "description": "Whether to prefer using Python installations that are already present on the system, or\n those that are downloaded and installed by uv.",
      "anyOf": [
        {
          "$ref": "#/definitions/PythonPreference"
        },
        {
          "type": "null"
        }
      ]
    },
    "reinstall": {
      "description": "Reinstall all packages, regardless of whether they're already installed. Implies `refresh`.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "reinstall-package": {
      "description": "Reinstall a specific package, regardless of whether it's already installed. Implies\n `refresh-package`.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/PackageName"
      }
    },
    "required-environments": {
      "description": "A list of environment markers, e.g., `sys_platform == 'darwin'.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "required-version": {
      "description": "Enforce a requirement on the version of uv.\n\n If the version of uv does not meet the requirement at runtime, uv will exit\n with an error.\n\n Accepts a [PEP 440](https://peps.python.org/pep-0440/) specifier, like `==0.5.0` or `>=0.5.0`.",
      "anyOf": [
        {
          "$ref": "#/definitions/RequiredVersion"
        },
        {
          "type": "null"
        }
      ]
    },
    "resolution": {
      "description": "The strategy to use when selecting between the different compatible versions for a given\n package requirement.\n\n By default, uv will use the latest compatible version of each package (`highest`).",
      "anyOf": [
        {
          "$ref": "#/definitions/ResolutionMode"
        },
        {
          "type": "null"
        }
      ]
    },
    "sources": {
      "description": "The sources to use when resolving dependencies.\n\n `tool.uv.sources` enriches the dependency metadata with additional sources, incorporated\n during development. A dependency source can be a Git repository, a URL, a local path, or an\n alternative registry.\n\n See [Dependencies](https://docs.astral.sh/uv/concepts/projects/dependencies/) for more.",
      "anyOf": [
        {
          "$ref": "#/definitions/ToolUvSources"
        },
        {
          "type": "null"
        }
      ]
    },
    "trusted-publishing": {
      "description": "Configure trusted publishing via GitHub Actions.\n\n By default, uv checks for trusted publishing when running in GitHub Actions, but ignores it\n if it isn't configured or the workflow doesn't have enough permissions (e.g., a pull request\n from a fork).",
      "anyOf": [
        {
          "$ref": "#/definitions/TrustedPublishing"
        },
        {
          "type": "null"
        }
      ]
    },
    "upgrade": {
      "description": "Allow package upgrades, ignoring pinned versions in any existing output file.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "upgrade-package": {
      "description": "Allow upgrades for a specific package, ignoring pinned versions in any existing output\n file.\n\n Accepts both standalone package names (`ruff`) and version specifiers (`ruff<0.5.0`).",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/Requirement"
      }
    },
    "workspace": {
      "description": "The workspace definition for the project, if any.",
      "anyOf": [
        {
          "$ref": "#/definitions/ToolUvWorkspace"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AnnotationStyle": {
      "description": "Indicate the style of annotation comments, used to indicate the dependencies that requested each\n package.",
      "oneOf": [
        {
          "description": "Render the annotations on a single, comma-separated line.",
          "type": "string",
          "const": "line"
        },
        {
          "description": "Render each annotation on its own line.",
          "type": "string",
          "const": "split"
        }
      ]
    },
    "AuthPolicy": {
      "description": "When to use authentication.",
      "oneOf": [
        {
          "description": "Authenticate when necessary.\n\n If credentials are provided, they will be used. Otherwise, an unauthenticated request will\n be attempted first. If the request fails, uv will search for credentials. If credentials are\n found, an authenticated request will be attempted.",
          "type": "string",
          "const": "auto"
        },
        {
          "description": "Always authenticate.\n\n If credentials are not provided, uv will eagerly search for credentials. If credentials\n cannot be found, uv will error instead of attempting an unauthenticated request.",
          "type": "string",
          "const": "always"
        },
        {
          "description": "Never authenticate.\n\n If credentials are provided, uv will error. uv will not search for credentials.",
          "type": "string",
          "const": "never"
        }
      ]
    },
    "BuildBackendSettings": {
      "description": "Settings for the uv build backend (`uv_build`).\n\n !!! note\n\n     The uv build backend is currently in preview and may change in any future release.\n\n Note that those settings only apply when using the `uv_build` backend, other build backends\n (such as hatchling) have their own configuration.\n\n All options that accept globs use the portable glob patterns from\n [PEP 639](https://packaging.python.org/en/latest/specifications/glob-patterns/).",
      "type": "object",
      "properties": {
        "data": {
          "description": "Data includes for wheels.\n\n Each entry is a directory, whose contents are copied to the matching directory in the wheel\n in `<name>-<version>.data/(purelib|platlib|headers|scripts|data)`. Upon installation, this\n data is moved to its target location, as defined by\n <https://docs.python.org/3.12/library/sysconfig.html#installation-paths>. Usually, small\n data files are included by placing them in the Python module instead of using data includes.\n\n - `scripts`: Installed to the directory for executables, `<venv>/bin` on Unix or\n   `<venv>\\Scripts` on Windows. This directory is added to `PATH` when the virtual\n   environment  is activated or when using `uv run`, so this data type can be used to install\n   additional binaries. Consider using `project.scripts` instead for Python entrypoints.\n - `data`: Installed over the virtualenv environment root.\n\n     Warning: This may override existing files!\n\n - `headers`: Installed to the include directory. Compilers building Python packages\n   with this package as build requirement use the include directory to find additional header\n   files.\n - `purelib` and `platlib`: Installed to the `site-packages` directory. It is not recommended\n   to uses these two options.",
          "allOf": [
            {
              "$ref": "#/definitions/WheelDataIncludes"
            }
          ],
          "default": {
            "data": null,
            "headers": null,
            "platlib": null,
            "purelib": null,
            "scripts": null
          }
        },
        "default-excludes": {
          "description": "If set to `false`, the default excludes aren't applied.\n\n Default excludes: `__pycache__`, `*.pyc`, and `*.pyo`.",
          "type": "boolean",
          "default": true
        },
        "module-name": {
          "description": "The name of the module directory inside `module-root`.\n\n The default module name is the package name with dots and dashes replaced by underscores.\n\n Package names need to be valid Python identifiers, and the directory needs to contain a\n `__init__.py`. An exception are stubs packages, whose name ends with `-stubs`, with the stem\n being the module name, and which contain a `__init__.pyi` file.\n\n Note that using this option runs the risk of creating two packages with different names but\n the same module names. Installing such packages together leads to unspecified behavior,\n often with corrupted files or directory trees.",
          "anyOf": [
            {
              "$ref": "#/definitions/ModuleName"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "module-root": {
          "description": "The directory that contains the module directory.\n\n Common values are `src` (src layout, the default) or an empty path (flat layout).",
          "type": "string",
          "default": "src"
        },
        "source-exclude": {
          "description": "Glob expressions which files and directories to exclude from the source distribution.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "source-include": {
          "description": "Glob expressions which files and directories to additionally include in the source\n distribution.\n\n `pyproject.toml` and the contents of the module directory are always included.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "wheel-exclude": {
          "description": "Glob expressions which files and directories to exclude from the wheel.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CacheKey": {
      "anyOf": [
        {
          "description": "Ex) `\"Cargo.lock\"` or `\"**/*.toml\"`",
          "type": "string"
        },
        {
          "description": "Ex) `{ file = \"Cargo.lock\" }` or `{ file = \"**/*.toml\" }`",
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "file"
          ]
        },
        {
          "description": "Ex) `{ dir = \"src\" }`",
          "type": "object",
          "properties": {
            "dir": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "dir"
          ]
        },
        {
          "description": "Ex) `{ git = true }` or `{ git = { commit = true, tags = false } }`",
          "type": "object",
          "properties": {
            "git": {
              "$ref": "#/definitions/GitPattern"
            }
          },
          "additionalProperties": false,
          "required": [
            "git"
          ]
        },
        {
          "description": "Ex) `{ env = \"UV_CACHE_INFO\" }`",
          "type": "object",
          "properties": {
            "env": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "env"
          ]
        }
      ]
    },
    "ConfigSettingValue": {
      "anyOf": [
        {
          "description": "The value consists of a single string.",
          "type": "string"
        },
        {
          "description": "The value consists of a list of strings.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "ConfigSettings": {
      "description": "Settings to pass to a PEP 517 build backend, structured as a map from (string) key to string or\n list of strings.\n\n See: <https://peps.python.org/pep-0517/#config-settings>",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ConfigSettingValue"
      }
    },
    "DefaultGroups": {
      "description": "Either the literal \"all\" or a list of groups",
      "oneOf": [
        {
          "description": "All groups are defaulted",
          "type": "string",
          "const": "All"
        },
        {
          "description": "A list of groups",
          "type": "object",
          "properties": {
            "List": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupName"
              }
            }
          },
          "additionalProperties": false,
          "required": [
            "List"
          ]
        }
      ]
    },
    "ExcludeNewer": {
      "description": "Exclude distributions uploaded after the given timestamp.\n\nAccepts both RFC 3339 timestamps (e.g., `2006-12-02T02:07:43Z`) and local dates in the same format (e.g., `2006-12-02`).",
      "type": "string",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:\\d{2}))?$"
    },
    "ExtraName": {
      "description": "The normalized name of an extra dependency.\n\n Converts the name to lowercase and collapses runs of `-`, `_`, and `.` down to a single `-`.\n For example, `---`, `.`, and `__` are all converted to a single `-`.\n\n See:\n - <https://peps.python.org/pep-0685/#specification/>\n - <https://packaging.python.org/en/latest/specifications/name-normalization/>",
      "allOf": [
        {
          "$ref": "#/definitions/string"
        }
      ]
    },
    "ForkStrategy": {
      "oneOf": [
        {
          "description": "Optimize for selecting the fewest number of versions for each package. Older versions may\n be preferred if they are compatible with a wider range of supported Python versions or\n platforms.",
          "type": "string",
          "const": "fewest"
        },
        {
          "description": "Optimize for selecting latest supported version of each package, for each supported Python\n version.",
          "type": "string",
          "const": "requires-python"
        }
      ]
    },
    "GitPattern": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/GitSet"
        }
      ]
    },
    "GitSet": {
      "type": "object",
      "properties": {
        "commit": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "tags": {
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "GroupName": {
      "description": "The normalized name of a dependency group.\n\n See:\n - <https://peps.python.org/pep-0735/>\n - <https://packaging.python.org/en/latest/specifications/name-normalization/>",
      "allOf": [
        {
          "$ref": "#/definitions/string"
        }
      ]
    },
    "Index": {
      "type": "object",
      "properties": {
        "format": {
          "description": "The format used by the index.\n\n Indexes can either be PEP 503-compliant (i.e., a PyPI-style registry implementing the Simple\n API) or structured as a flat list of distributions (e.g., `--find-links`). In both cases,\n indexes can point to either local or remote resources.",
          "allOf": [
            {
              "$ref": "#/definitions/IndexFormat"
            }
          ],
          "default": "simple"
        },
        "authenticate": {
          "description": "When uv should use authentication for requests to the index.\n\n ```toml\n [[tool.uv.index]]\n name = \"my-index\"\n url = \"https://<omitted>/simple\"\n authenticate = \"always\"\n ```",
          "allOf": [
            {
              "$ref": "#/definitions/AuthPolicy"
            }
          ],
          "default": "auto"
        },
        "default": {
          "description": "Mark the index as the default index.\n\n By default, uv uses PyPI as the default index, such that even if additional indexes are\n defined via `[[tool.uv.index]]`, PyPI will still be used as a fallback for packages that\n aren't found elsewhere. To disable the PyPI default, set `default = true` on at least one\n other index.\n\n Marking an index as default will move it to the front of the list of indexes, such that it\n is given the highest priority when resolving packages.",
          "type": "boolean",
          "default": false
        },
        "explicit": {
          "description": "Mark the index as explicit.\n\n Explicit indexes will _only_ be used when explicitly requested via a `[tool.uv.sources]`\n definition, as in:\n\n ```toml\n [[tool.uv.index]]\n name = \"pytorch\"\n url = \"https://download.pytorch.org/whl/cu121\"\n explicit = true\n\n [tool.uv.sources]\n torch = { index = \"pytorch\" }\n ```",
          "type": "boolean",
          "default": false
        },
        "ignore-error-codes": {
          "description": "Status codes that uv should ignore when deciding whether\n to continue searching in the next index after a failure.\n\n ```toml\n [[tool.uv.index]]\n name = \"my-index\"\n url = \"https://<omitted>/simple\"\n ignore-error-codes = [401, 403]\n ```",
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "items": {
            "$ref": "#/definitions/StatusCode"
          }
        },
        "name": {
          "description": "The name of the index.\n\n Index names can be used to reference indexes elsewhere in the configuration. For example,\n you can pin a package to a specific index by name:\n\n ```toml\n [[tool.uv.index]]\n name = \"pytorch\"\n url = \"https://download.pytorch.org/whl/cu121\"\n\n [tool.uv.sources]\n torch = { index = \"pytorch\" }\n ```",
          "anyOf": [
            {
              "$ref": "#/definitions/IndexName"
            },
            {
              "type": "null"
            }
          ]
        },
        "publish-url": {
          "description": "The URL of the upload endpoint.\n\n When using `uv publish --index <name>`, this URL is used for publishing.\n\n A configuration for the default index PyPI would look as follows:\n\n ```toml\n [[tool.uv.index]]\n name = \"pypi\"\n url = \"https://pypi.org/simple\"\n publish-url = \"https://upload.pypi.org/legacy/\"\n ```",
          "type": [
            "string",
            "null"
          ],
          "format": "uri"
        },
        "url": {
          "description": "The URL of the index.\n\n Expects to receive a URL (e.g., `https://pypi.org/simple`) or a local path.",
          "allOf": [
            {
              "$ref": "#/definitions/IndexUrl"
            }
          ]
        }
      },
      "required": [
        "url"
      ]
    },
    "IndexFormat": {
      "oneOf": [
        {
          "description": "A PyPI-style index implementing the Simple Repository API.",
          "type": "string",
          "const": "simple"
        },
        {
          "description": "A `--find-links`-style index containing a flat list of wheels and source distributions.",
          "type": "string",
          "const": "flat"
        }
      ]
    },
    "IndexName": {
      "description": "The normalized name of an index.\n\n Index names may contain letters, digits, hyphens, underscores, and periods, and must be ASCII.",
      "allOf": [
        {
          "$ref": "#/definitions/string"
        }
      ]
    },
    "IndexStrategy": {
      "oneOf": [
        {
          "description": "Only use results from the first index that returns a match for a given package name.\n\n While this differs from pip's behavior, it's the default index strategy as it's the most\n secure.",
          "type": "string",
          "const": "first-index"
        },
        {
          "description": "Search for every package name across all indexes, exhausting the versions from the first\n index before moving on to the next.\n\n In this strategy, we look for every package across all indexes. When resolving, we attempt\n to use versions from the indexes in order, such that we exhaust all available versions from\n the first index before moving on to the next. Further, if a version is found to be\n incompatible in the first index, we do not reconsider that version in subsequent indexes,\n even if the secondary index might contain compatible versions (e.g., variants of the same\n versions with different ABI tags or Python version constraints).\n\n See: <https://peps.python.org/pep-0708/>",
          "type": "string",
          "const": "unsafe-first-match"
        },
        {
          "description": "Search for every package name across all indexes, preferring the \"best\" version found. If a\n package version is in multiple indexes, only look at the entry for the first index.\n\n In this strategy, we look for every package across all indexes. When resolving, we consider\n all versions from all indexes, choosing the \"best\" version found (typically, the highest\n compatible version).\n\n This most closely matches pip's behavior, but exposes the resolver to \"dependency confusion\"\n attacks whereby malicious actors can publish packages to public indexes with the same name\n as internal packages, causing the resolver to install the malicious package in lieu of\n the intended internal package.\n\n See: <https://peps.python.org/pep-0708/>",
          "type": "string",
          "const": "unsafe-best-match"
        }
      ]
    },
    "IndexUrl": {
      "description": "The URL of an index to use for fetching packages (e.g., `https://pypi.org/simple`), or a local path.",
      "type": "string"
    },
    "KeyringProviderType": {
      "description": "Keyring provider type to use for credential lookup.",
      "oneOf": [
        {
          "description": "Do not use keyring for credential lookup.",
          "type": "string",
          "const": "disabled"
        },
        {
          "description": "Use the `keyring` command for credential lookup.",
          "type": "string",
          "const": "subprocess"
        }
      ]
    },
    "LinkMode": {
      "oneOf": [
        {
          "description": "Clone (i.e., copy-on-write) packages from the wheel into the `site-packages` directory.",
          "type": "string",
          "const": "clone"
        },
        {
          "description": "Copy packages from the wheel into the `site-packages` directory.",
          "type": "string",
          "const": "copy"
        },
        {
          "description": "Hard link packages from the wheel into the `site-packages` directory.",
          "type": "string",
          "const": "hardlink"
        },
        {
          "description": "Symbolically link packages from the wheel into the `site-packages` directory.\n\n WARNING: The use of symlinks is discouraged, as they create tight coupling between the\n cache and the target environment. For example, clearing the cache (`uv cache clear`) will\n break all installed packages by way of removing the underlying source files. Use symlinks\n with caution.",
          "type": "string",
          "const": "symlink"
        }
      ]
    },
    "MarkerTree": {
      "description": "A PEP 508-compliant marker expression, e.g., `sys_platform == 'Darwin'`",
      "type": "string"
    },
    "ModuleName": {
      "description": "The name of the module, or the name of a stubs package",
      "type": "string",
      "pattern": "^[_\\p{Alphabetic}][_0-9\\p{Alphabetic}]*(-stubs)?$"
    },
    "PackageName": {
      "description": "The normalized name of a package.\n\n Converts the name to lowercase and collapses runs of `-`, `_`, and `.` down to a single `-`.\n For example, `---`, `.`, and `__` are all converted to a single `-`.\n\n See: <https://packaging.python.org/en/latest/specifications/name-normalization/>",
      "allOf": [
        {
          "$ref": "#/definitions/string"
        }
      ]
    },
    "PackageNameSpecifier": {
      "description": "The name of a package, or `:all:` or `:none:` to select or omit all packages, respectively.",
      "type": "string",
      "pattern": "^(:none:|:all:|([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9]))$"
    },
    "PipGroupName": {
      "description": "The pip-compatible variant of a [`GroupName`].\n\n Either <groupname> or <path>:<groupname>.\n If <path> is omitted it defaults to \"pyproject.toml\".",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/GroupName"
        },
        "path": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "PipOptions": {
      "description": "Settings that are specific to the `uv pip` command-line interface.\n\n These values will be ignored when running commands outside the `uv pip` namespace (e.g.,\n `uv lock`, `uvx`).",
      "type": "object",
      "properties": {
        "all-extras": {
          "description": "Include all optional dependencies.\n\n Only applies to `pyproject.toml`, `setup.py`, and `setup.cfg` sources.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "allow-empty-requirements": {
          "description": "Allow `uv pip sync` with empty requirements, which will clear the environment of all\n packages.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "annotation-style": {
          "description": "The style of the annotation comments included in the output file, used to indicate the\n source of each package.",
          "anyOf": [
            {
              "$ref": "#/definitions/AnnotationStyle"
            },
            {
              "type": "null"
            }
          ]
        },
        "break-system-packages": {
          "description": "Allow uv to modify an `EXTERNALLY-MANAGED` Python installation.\n\n WARNING: `--break-system-packages` is intended for use in continuous integration (CI)\n environments, when installing into Python installations that are managed by an external\n package manager, like `apt`. It should be used with caution, as such Python installations\n explicitly recommend against modifications by other package managers (like uv or pip).",
          "type": [
            "boolean",
            "null"
          ]
        },
        "compile-bytecode": {
          "description": "Compile Python files to bytecode after installation.\n\n By default, uv does not compile Python (`.py`) files to bytecode (`__pycache__/*.pyc`);\n instead, compilation is performed lazily the first time a module is imported. For use-cases\n in which start time is critical, such as CLI applications and Docker containers, this option\n can be enabled to trade longer installation times for faster start times.\n\n When enabled, uv will process the entire site-packages directory (including packages that\n are not being modified by the current operation) for consistency. Like pip, it will also\n ignore errors.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "config-settings": {
          "description": "Settings to pass to the [PEP 517](https://peps.python.org/pep-0517/) build backend,\n specified as `KEY=VALUE` pairs.",
          "anyOf": [
            {
              "$ref": "#/definitions/ConfigSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "custom-compile-command": {
          "description": "The header comment to include at the top of the output file generated by `uv pip compile`.\n\n Used to reflect custom build scripts and commands that wrap `uv pip compile`.",
          "type": [
            "string",
            "null"
          ]
        },
        "dependency-metadata": {
          "description": "Pre-defined static metadata for dependencies of the project (direct or transitive). When\n provided, enables the resolver to use the specified metadata instead of querying the\n registry or building the relevant package from source.\n\n Metadata should be provided in adherence with the [Metadata 2.3](https://packaging.python.org/en/latest/specifications/core-metadata/)\n standard, though only the following fields are respected:\n\n - `name`: The name of the package.\n - (Optional) `version`: The version of the package. If omitted, the metadata will be applied\n   to all versions of the package.\n - (Optional) `requires-dist`: The dependencies of the package (e.g., `werkzeug>=0.14`).\n - (Optional) `requires-python`: The Python version required by the package (e.g., `>=3.10`).\n - (Optional) `provides-extras`: The extras provided by the package.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/StaticMetadata"
          }
        },
        "emit-build-options": {
          "description": "Include `--no-binary` and `--only-binary` entries in the output file generated by `uv pip compile`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "emit-find-links": {
          "description": "Include `--find-links` entries in the output file generated by `uv pip compile`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "emit-index-annotation": {
          "description": "Include comment annotations indicating the index used to resolve each package (e.g.,\n `# from https://pypi.org/simple`).",
          "type": [
            "boolean",
            "null"
          ]
        },
        "emit-index-url": {
          "description": "Include `--index-url` and `--extra-index-url` entries in the output file generated by `uv pip compile`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "emit-marker-expression": {
          "description": "Whether to emit a marker string indicating the conditions under which the set of pinned\n dependencies is valid.\n\n The pinned dependencies may be valid even when the marker expression is\n false, but when the expression is true, the requirements are known to\n be correct.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "exclude-newer": {
          "description": "Limit candidate packages to those that were uploaded prior to a given point in time.\n\n Accepts a superset of [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html) (e.g.,\n `2006-12-02T02:07:43Z`). A full timestamp is required to ensure that the resolver will\n behave consistently across timezones.",
          "anyOf": [
            {
              "$ref": "#/definitions/ExcludeNewer"
            },
            {
              "type": "null"
            }
          ]
        },
        "extra": {
          "description": "Include optional dependencies from the specified extra; may be provided more than once.\n\n Only applies to `pyproject.toml`, `setup.py`, and `setup.cfg` sources.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/ExtraName"
          }
        },
        "extra-index-url": {
          "description": "Extra URLs of package indexes to use, in addition to `--index-url`.\n\n Accepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/)\n (the simple repository API), or a local directory laid out in the same format.\n\n All indexes provided via this flag take priority over the index specified by\n [`index_url`](#index-url). When multiple indexes are provided, earlier values take priority.\n\n To control uv's resolution strategy when multiple indexes are present, see\n [`index_strategy`](#index-strategy).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/IndexUrl"
          }
        },
        "find-links": {
          "description": "Locations to search for candidate distributions, in addition to those found in the registry\n indexes.\n\n If a path, the target must be a directory that contains packages as wheel files (`.whl`) or\n source distributions (e.g., `.tar.gz` or `.zip`) at the top level.\n\n If a URL, the page must contain a flat list of links to package files adhering to the\n formats described above.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/IndexUrl"
          }
        },
        "fork-strategy": {
          "description": "The strategy to use when selecting multiple versions of a given package across Python\n versions and platforms.\n\n By default, uv will optimize for selecting the latest version of each package for each\n supported Python version (`requires-python`), while minimizing the number of selected\n versions across platforms.\n\n Under `fewest`, uv will minimize the number of selected versions for each package,\n preferring older versions that are compatible with a wider range of supported Python\n versions or platforms.",
          "anyOf": [
            {
              "$ref": "#/definitions/ForkStrategy"
            },
            {
              "type": "null"
            }
          ]
        },
        "generate-hashes": {
          "description": "Include distribution hashes in the output file.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "group": {
          "description": "Include the following dependency groups.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PipGroupName"
          }
        },
        "index-strategy": {
          "description": "The strategy to use when resolving against multiple index URLs.\n\n By default, uv will stop at the first index on which a given package is available, and\n limit resolutions to those present on that first index (`first-index`). This prevents\n \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the\n same name to an alternate index.",
          "anyOf": [
            {
              "$ref": "#/definitions/IndexStrategy"
            },
            {
              "type": "null"
            }
          ]
        },
        "index-url": {
          "description": "The URL of the Python package index (by default: <https://pypi.org/simple>).\n\n Accepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/)\n (the simple repository API), or a local directory laid out in the same format.\n\n The index provided by this setting is given lower priority than any indexes specified via\n [`extra_index_url`](#extra-index-url).",
          "anyOf": [
            {
              "$ref": "#/definitions/IndexUrl"
            },
            {
              "type": "null"
            }
          ]
        },
        "keyring-provider": {
          "description": "Attempt to use `keyring` for authentication for index URLs.\n\n At present, only `--keyring-provider subprocess` is supported, which configures uv to\n use the `keyring` CLI to handle authentication.",
          "anyOf": [
            {
              "$ref": "#/definitions/KeyringProviderType"
            },
            {
              "type": "null"
            }
          ]
        },
        "link-mode": {
          "description": "The method to use when installing packages from the global cache.\n\n Defaults to `clone` (also known as Copy-on-Write) on macOS, and `hardlink` on Linux and\n Windows.",
          "anyOf": [
            {
              "$ref": "#/definitions/LinkMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "no-annotate": {
          "description": "Exclude comment annotations indicating the source of each package from the output file\n generated by `uv pip compile`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-binary": {
          "description": "Don't install pre-built wheels.\n\n The given packages will be built and installed from source. The resolver will still use\n pre-built wheels to extract package metadata, if available.\n\n Multiple packages may be provided. Disable binaries for all packages with `:all:`.\n Clear previously specified packages with `:none:`.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PackageNameSpecifier"
          }
        },
        "no-build": {
          "description": "Don't build source distributions.\n\n When enabled, resolving will not run arbitrary Python code. The cached wheels of\n already-built source distributions will be reused, but operations that require building\n distributions will exit with an error.\n\n Alias for `--only-binary :all:`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-build-isolation": {
          "description": "Disable isolation when building source distributions.\n\n Assumes that build dependencies specified by [PEP 518](https://peps.python.org/pep-0518/)\n are already installed.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-build-isolation-package": {
          "description": "Disable isolation when building source distributions for a specific package.\n\n Assumes that the packages' build dependencies specified by [PEP 518](https://peps.python.org/pep-0518/)\n are already installed.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PackageName"
          }
        },
        "no-deps": {
          "description": "Ignore package dependencies, instead only add those packages explicitly listed\n on the command line to the resulting requirements file.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-emit-package": {
          "description": "Specify a package to omit from the output resolution. Its dependencies will still be\n included in the resolution. Equivalent to pip-compile's `--unsafe-package` option.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PackageName"
          }
        },
        "no-extra": {
          "description": "Exclude the specified optional dependencies if `all-extras` is supplied.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/ExtraName"
          }
        },
        "no-header": {
          "description": "Exclude the comment header at the top of output file generated by `uv pip compile`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-index": {
          "description": "Ignore all registry indexes (e.g., PyPI), instead relying on direct URL dependencies and\n those provided via `--find-links`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-sources": {
          "description": "Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the\n standards-compliant, publishable package metadata, as opposed to using any local or Git\n sources.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-strip-extras": {
          "description": "Include extras in the output file.\n\n By default, uv strips extras, as any packages pulled in by the extras are already included\n as dependencies in the output file directly. Further, output files generated with\n `--no-strip-extras` cannot be used as constraints files in `install` and `sync` invocations.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-strip-markers": {
          "description": "Include environment markers in the output file generated by `uv pip compile`.\n\n By default, uv strips environment markers, as the resolution generated by `compile` is\n only guaranteed to be correct for the target environment.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "only-binary": {
          "description": "Only use pre-built wheels; don't build source distributions.\n\n When enabled, resolving will not run code from the given packages. The cached wheels of already-built\n source distributions will be reused, but operations that require building distributions will\n exit with an error.\n\n Multiple packages may be provided. Disable binaries for all packages with `:all:`.\n Clear previously specified packages with `:none:`.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PackageNameSpecifier"
          }
        },
        "output-file": {
          "description": "Write the requirements generated by `uv pip compile` to the given `requirements.txt` file.\n\n If the file already exists, the existing versions will be preferred when resolving\n dependencies, unless `--upgrade` is also specified.",
          "type": [
            "string",
            "null"
          ]
        },
        "prefix": {
          "description": "Install packages into `lib`, `bin`, and other top-level folders under the specified\n directory, as if a virtual environment were present at that location.\n\n In general, prefer the use of `--python` to install into an alternate environment, as\n scripts and other artifacts installed via `--prefix` will reference the installing\n interpreter, rather than any interpreter added to the `--prefix` directory, rendering them\n non-portable.",
          "type": [
            "string",
            "null"
          ]
        },
        "prerelease": {
          "description": "The strategy to use when considering pre-release versions.\n\n By default, uv will accept pre-releases for packages that _only_ publish pre-releases,\n along with first-party requirements that contain an explicit pre-release marker in the\n declared specifiers (`if-necessary-or-explicit`).",
          "anyOf": [
            {
              "$ref": "#/definitions/PrereleaseMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "python": {
          "description": "The Python interpreter into which packages should be installed.\n\n By default, uv installs into the virtual environment in the current working directory or\n any parent directory. The `--python` option allows you to specify a different interpreter,\n which is intended for use in continuous integration (CI) environments or other automated\n workflows.\n\n Supported formats:\n - `3.10` looks for an installed Python 3.10 in the registry on Windows (see\n   `py --list-paths`), or `python3.10` on Linux and macOS.\n - `python3.10` or `python.exe` looks for a binary with the given name in `PATH`.\n - `/home/ferris/.local/bin/python3.10` uses the exact Python at the given path.",
          "type": [
            "string",
            "null"
          ]
        },
        "python-platform": {
          "description": "The platform for which requirements should be resolved.\n\n Represented as a \"target triple\", a string that describes the target platform in terms of\n its CPU, vendor, and operating system name, like `x86_64-unknown-linux-gnu` or\n `aarch64-apple-darwin`.",
          "anyOf": [
            {
              "$ref": "#/definitions/TargetTriple"
            },
            {
              "type": "null"
            }
          ]
        },
        "python-version": {
          "description": "The minimum Python version that should be supported by the resolved requirements (e.g.,\n `3.8` or `3.8.17`).\n\n If a patch version is omitted, the minimum patch version is assumed. For example, `3.8` is\n mapped to `3.8.0`.",
          "anyOf": [
            {
              "$ref": "#/definitions/PythonVersion"
            },
            {
              "type": "null"
            }
          ]
        },
        "reinstall": {
          "description": "Reinstall all packages, regardless of whether they're already installed. Implies `refresh`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "reinstall-package": {
          "description": "Reinstall a specific package, regardless of whether it's already installed. Implies\n `refresh-package`.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PackageName"
          }
        },
        "require-hashes": {
          "description": "Require a matching hash for each requirement.\n\n Hash-checking mode is all or nothing. If enabled, _all_ requirements must be provided\n with a corresponding hash or set of hashes. Additionally, if enabled, _all_ requirements\n must either be pinned to exact versions (e.g., `==1.0.0`), or be specified via direct URL.\n\n Hash-checking mode introduces a number of additional constraints:\n\n - Git dependencies are not supported.\n - Editable installs are not supported.\n - Local dependencies are not supported, unless they point to a specific wheel (`.whl`) or\n   source archive (`.zip`, `.tar.gz`), as opposed to a directory.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "resolution": {
          "description": "The strategy to use when selecting between the different compatible versions for a given\n package requirement.\n\n By default, uv will use the latest compatible version of each package (`highest`).",
          "anyOf": [
            {
              "$ref": "#/definitions/ResolutionMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "strict": {
          "description": "Validate the Python environment, to detect packages with missing dependencies and other\n issues.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "system": {
          "description": "Install packages into the system Python environment.\n\n By default, uv installs into the virtual environment in the current working directory or\n any parent directory. The `--system` option instructs uv to instead use the first Python\n found in the system `PATH`.\n\n WARNING: `--system` is intended for use in continuous integration (CI) environments and\n should be used with caution, as it can modify the system Python installation.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "target": {
          "description": "Install packages into the specified directory, rather than into the virtual or system Python\n environment. The packages will be installed at the top-level of the directory.",
          "type": [
            "string",
            "null"
          ]
        },
        "torch-backend": {
          "description": "The backend to use when fetching packages in the PyTorch ecosystem.\n\n When set, uv will ignore the configured index URLs for packages in the PyTorch ecosystem,\n and will instead use the defined backend.\n\n For example, when set to `cpu`, uv will use the CPU-only PyTorch index; when set to `cu126`,\n uv will use the PyTorch index for CUDA 12.6.\n\n The `auto` mode will attempt to detect the appropriate PyTorch index based on the currently\n installed CUDA drivers.\n\n This option is in preview and may change in any future release.",
          "anyOf": [
            {
              "$ref": "#/definitions/TorchMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "universal": {
          "description": "Perform a universal resolution, attempting to generate a single `requirements.txt` output\n file that is compatible with all operating systems, architectures, and Python\n implementations.\n\n In universal mode, the current Python version (or user-provided `--python-version`) will be\n treated as a lower bound. For example, `--universal --python-version 3.7` would produce a\n universal resolution for Python 3.7 and later.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "upgrade": {
          "description": "Allow package upgrades, ignoring pinned versions in any existing output file.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "upgrade-package": {
          "description": "Allow upgrades for a specific package, ignoring pinned versions in any existing output\n file.\n\n Accepts both standalone package names (`ruff`) and version specifiers (`ruff<0.5.0`).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Requirement"
          }
        },
        "verify-hashes": {
          "description": "Validate any hashes provided in the requirements file.\n\n Unlike `--require-hashes`, `--verify-hashes` does not require that all requirements have\n hashes; instead, it will limit itself to verifying the hashes of those requirements that do\n include them.",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "PrereleaseMode": {
      "oneOf": [
        {
          "description": "Disallow all pre-release versions.",
          "type": "string",
          "const": "disallow"
        },
        {
          "description": "Allow all pre-release versions.",
          "type": "string",
          "const": "allow"
        },
        {
          "description": "Allow pre-release versions if all versions of a package are pre-release.",
          "type": "string",
          "const": "if-necessary"
        },
        {
          "description": "Allow pre-release versions for first-party packages with explicit pre-release markers in\n their version requirements.",
          "type": "string",
          "const": "explicit"
        },
        {
          "description": "Allow pre-release versions if all versions of a package are pre-release, or if the package\n has an explicit pre-release marker in its version requirements.",
          "type": "string",
          "const": "if-necessary-or-explicit"
        }
      ]
    },
    "PythonDownloads": {
      "oneOf": [
        {
          "description": "Automatically download managed Python installations when needed.",
          "type": "string",
          "const": "automatic"
        },
        {
          "description": "Do not automatically download managed Python installations; require explicit installation.",
          "type": "string",
          "const": "manual"
        },
        {
          "description": "Do not ever allow Python downloads.",
          "type": "string",
          "const": "never"
        }
      ]
    },
    "PythonPreference": {
      "oneOf": [
        {
          "description": "Only use managed Python installations; never use system Python installations.",
          "type": "string",
          "const": "only-managed"
        },
        {
          "description": "Prefer managed Python installations over system Python installations.\n\n System Python installations are still preferred over downloading managed Python versions.\n Use `only-managed` to always fetch a managed Python version.",
          "type": "string",
          "const": "managed"
        },
        {
          "description": "Prefer system Python installations over managed Python installations.\n\n If a system Python installation cannot be found, a managed Python installation can be used.",
          "type": "string",
          "const": "system"
        },
        {
          "description": "Only use system Python installations; never use managed Python installations.",
          "type": "string",
          "const": "only-system"
        }
      ]
    },
    "PythonVersion": {
      "description": "A Python version specifier, e.g. `3.11` or `3.12.4`.",
      "type": "string",
      "pattern": "^3\\.\\d+(\\.\\d+)?$"
    },
    "RequiredVersion": {
      "description": "A version specifier, e.g. `>=0.5.0` or `==0.5.0`.",
      "type": "string"
    },
    "Requirement": {
      "description": "A PEP 508 dependency specifier, e.g., `ruff >= 0.6.0`",
      "type": "string"
    },
    "ResolutionMode": {
      "oneOf": [
        {
          "description": "Resolve the highest compatible version of each package.",
          "type": "string",
          "const": "highest"
        },
        {
          "description": "Resolve the lowest compatible version of each package.",
          "type": "string",
          "const": "lowest"
        },
        {
          "description": "Resolve the lowest compatible version of any direct dependencies, and the highest\n compatible version of any transitive dependencies.",
          "type": "string",
          "const": "lowest-direct"
        }
      ]
    },
    "SchemaConflictItem": {
      "description": "A single item in a conflicting set.\n\n Each item is a pair of an (optional) package and a corresponding extra or group name for that\n package.",
      "type": "object",
      "properties": {
        "extra": {
          "anyOf": [
            {
              "$ref": "#/definitions/ExtraName"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "group": {
          "anyOf": [
            {
              "$ref": "#/definitions/GroupName"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "package": {
          "anyOf": [
            {
              "$ref": "#/definitions/PackageName"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      }
    },
    "SchemaConflictSet": {
      "description": "Like [`ConflictSet`], but for deserialization in `pyproject.toml`.\n\n The schema format is different from the in-memory format. Specifically, the\n schema format does not allow specifying the package name (or will make it\n optional in the future), where as the in-memory format needs the package\n name.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SchemaConflictItem"
      }
    },
    "SchemaConflicts": {
      "description": "Like [`Conflicts`], but for deserialization in `pyproject.toml`.\n\n The schema format is different from the in-memory format. Specifically, the\n schema format does not allow specifying the package name (or will make it\n optional in the future), where as the in-memory format needs the package\n name.\n\n N.B. `Conflicts` is still used for (de)serialization. Specifically, in the\n lock file, where the package name is required.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SchemaConflictSet"
      }
    },
    "Source": {
      "description": "A `tool.uv.sources` value.",
      "anyOf": [
        {
          "description": "A remote Git repository, available over HTTPS or SSH.\n\n Example:\n ```toml\n flask = { git = \"https://github.com/pallets/flask\", tag = \"3.0.0\" }\n ```",
          "type": "object",
          "properties": {
            "branch": {
              "type": [
                "string",
                "null"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ExtraName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "git": {
              "description": "The repository URL (without the `git+` prefix).",
              "type": "string",
              "format": "uri"
            },
            "group": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GroupName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "marker": {
              "$ref": "#/definitions/MarkerTree"
            },
            "rev": {
              "type": [
                "string",
                "null"
              ]
            },
            "subdirectory": {
              "description": "The path to the directory with the `pyproject.toml`, if it's not in the archive root.",
              "anyOf": [
                {
                  "$ref": "#/definitions/string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "tag": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false,
          "required": [
            "git"
          ]
        },
        {
          "description": "A remote `http://` or `https://` URL, either a wheel (`.whl`) or a source distribution\n (`.zip`, `.tar.gz`).\n\n Example:\n ```toml\n flask = { url = \"https://files.pythonhosted.org/packages/61/80/ffe1da13ad9300f87c93af113edd0638c75138c42a0994becfacac078c06/flask-3.0.3-py3-none-any.whl\" }\n ```",
          "type": "object",
          "properties": {
            "extra": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ExtraName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "group": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GroupName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "marker": {
              "$ref": "#/definitions/MarkerTree"
            },
            "subdirectory": {
              "description": "For source distributions, the path to the directory with the `pyproject.toml`, if it's\n not in the archive root.",
              "anyOf": [
                {
                  "$ref": "#/definitions/string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          },
          "additionalProperties": false,
          "required": [
            "url"
          ]
        },
        {
          "description": "The path to a dependency, either a wheel (a `.whl` file), source distribution (a `.zip` or\n `.tar.gz` file), or source tree (i.e., a directory containing a `pyproject.toml` or\n `setup.py` file in the root).",
          "type": "object",
          "properties": {
            "editable": {
              "description": "`false` by default.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ExtraName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "group": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GroupName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "marker": {
              "$ref": "#/definitions/MarkerTree"
            },
            "package": {
              "description": "Whether to treat the dependency as a buildable Python package (`true`) or as a virtual\n package (`false`). If `false`, the package will not be built or installed, but its\n dependencies will be included in the virtual environment.\n\n When omitted, the package status is inferred based on the presence of a `[build-system]`\n in the project's `pyproject.toml`.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "path": {
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false,
          "required": [
            "path"
          ]
        },
        {
          "description": "A dependency pinned to a specific index, e.g., `torch` after setting `torch` to `https://download.pytorch.org/whl/cu118`.",
          "type": "object",
          "properties": {
            "extra": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ExtraName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "group": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GroupName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "index": {
              "$ref": "#/definitions/IndexName"
            },
            "marker": {
              "$ref": "#/definitions/MarkerTree"
            }
          },
          "additionalProperties": false,
          "required": [
            "index"
          ]
        },
        {
          "description": "A dependency on another package in the workspace.",
          "type": "object",
          "properties": {
            "extra": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ExtraName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "group": {
              "anyOf": [
                {
                  "$ref": "#/definitions/GroupName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "marker": {
              "$ref": "#/definitions/MarkerTree"
            },
            "workspace": {
              "description": "When set to `false`, the package will be fetched from the remote index, rather than\n included as a workspace package.",
              "type": "boolean"
            }
          },
          "additionalProperties": false,
          "required": [
            "workspace"
          ]
        }
      ]
    },
    "Sources": {
      "$ref": "#/definitions/SourcesWire"
    },
    "SourcesWire": {
      "anyOf": [
        {
          "$ref": "#/definitions/Source"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          }
        }
      ]
    },
    "StaticMetadata": {
      "description": "A subset of the Python Package Metadata 2.3 standard as specified in\n <https://packaging.python.org/specifications/core-metadata/>.",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/PackageName"
        },
        "provides-extras": {
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/definitions/ExtraName"
          }
        },
        "requires-dist": {
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/definitions/Requirement"
          }
        },
        "requires-python": {
          "description": "PEP 508-style Python requirement, e.g., `>=3.10`",
          "type": [
            "string",
            "null"
          ]
        },
        "version": {
          "description": "PEP 440-style package version, e.g., `1.2.3`",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "StatusCode": {
      "description": "HTTP status code (100-599)",
      "type": "number",
      "maximum": 599,
      "minimum": 100
    },
    "TargetTriple": {
      "description": "The supported target triples. Each triple consists of an architecture, vendor, and operating\n system.\n\n See: <https://doc.rust-lang.org/nightly/rustc/platform-support.html>",
      "oneOf": [
        {
          "description": "An alias for `x86_64-pc-windows-msvc`, the default target for Windows.",
          "type": "string",
          "const": "windows"
        },
        {
          "description": "An alias for `x86_64-unknown-linux-gnu`, the default target for Linux.",
          "type": "string",
          "const": "linux"
        },
        {
          "description": "An alias for `aarch64-apple-darwin`, the default target for macOS.",
          "type": "string",
          "const": "macos"
        },
        {
          "description": "A 64-bit x86 Windows target.",
          "type": "string",
          "const": "x86_64-pc-windows-msvc"
        },
        {
          "description": "A 32-bit x86 Windows target.",
          "type": "string",
          "const": "i686-pc-windows-msvc"
        },
        {
          "description": "An x86 Linux target. Equivalent to `x86_64-manylinux_2_17`.",
          "type": "string",
          "const": "x86_64-unknown-linux-gnu"
        },
        {
          "description": "An ARM-based macOS target, as seen on Apple Silicon devices\n\n By default, assumes the least-recent, non-EOL macOS version (13.0), but respects\n the `MACOSX_DEPLOYMENT_TARGET` environment variable if set.",
          "type": "string",
          "const": "aarch64-apple-darwin"
        },
        {
          "description": "An x86 macOS target.\n\n By default, assumes the least-recent, non-EOL macOS version (13.0), but respects\n the `MACOSX_DEPLOYMENT_TARGET` environment variable if set.",
          "type": "string",
          "const": "x86_64-apple-darwin"
        },
        {
          "description": "An ARM64 Linux target. Equivalent to `aarch64-manylinux_2_17`.",
          "type": "string",
          "const": "aarch64-unknown-linux-gnu"
        },
        {
          "description": "An ARM64 Linux target.",
          "type": "string",
          "const": "aarch64-unknown-linux-musl"
        },
        {
          "description": "An `x86_64` Linux target.",
          "type": "string",
          "const": "x86_64-unknown-linux-musl"
        },
        {
          "description": "An `x86_64` target for the `manylinux2014` platform. Equivalent to `x86_64-manylinux_2_17`.",
          "type": "string",
          "const": "x86_64-manylinux2014"
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_17` platform.",
          "type": "string",
          "const": "x86_64-manylinux_2_17"
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_28` platform.",
          "type": "string",
          "const": "x86_64-manylinux_2_28"
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_31` platform.",
          "type": "string",
          "const": "x86_64-manylinux_2_31"
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_32` platform.",
          "type": "string",
          "const": "x86_64-manylinux_2_32"
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_33` platform.",
          "type": "string",
          "const": "x86_64-manylinux_2_33"
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_34` platform.",
          "type": "string",
          "const": "x86_64-manylinux_2_34"
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_35` platform.",
          "type": "string",
          "const": "x86_64-manylinux_2_35"
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_36` platform.",
          "type": "string",
          "const": "x86_64-manylinux_2_36"
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_37` platform.",
          "type": "string",
          "const": "x86_64-manylinux_2_37"
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_38` platform.",
          "type": "string",
          "const": "x86_64-manylinux_2_38"
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_39` platform.",
          "type": "string",
          "const": "x86_64-manylinux_2_39"
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_40` platform.",
          "type": "string",
          "const": "x86_64-manylinux_2_40"
        },
        {
          "description": "An ARM64 target for the `manylinux2014` platform. Equivalent to `aarch64-manylinux_2_17`.",
          "type": "string",
          "const": "aarch64-manylinux2014"
        },
        {
          "description": "An ARM64 target for the `manylinux_2_17` platform.",
          "type": "string",
          "const": "aarch64-manylinux_2_17"
        },
        {
          "description": "An ARM64 target for the `manylinux_2_28` platform.",
          "type": "string",
          "const": "aarch64-manylinux_2_28"
        },
        {
          "description": "An ARM64 target for the `manylinux_2_31` platform.",
          "type": "string",
          "const": "aarch64-manylinux_2_31"
        },
        {
          "description": "An ARM64 target for the `manylinux_2_32` platform.",
          "type": "string",
          "const": "aarch64-manylinux_2_32"
        },
        {
          "description": "An ARM64 target for the `manylinux_2_33` platform.",
          "type": "string",
          "const": "aarch64-manylinux_2_33"
        },
        {
          "description": "An ARM64 target for the `manylinux_2_34` platform.",
          "type": "string",
          "const": "aarch64-manylinux_2_34"
        },
        {
          "description": "An ARM64 target for the `manylinux_2_35` platform.",
          "type": "string",
          "const": "aarch64-manylinux_2_35"
        },
        {
          "description": "An ARM64 target for the `manylinux_2_36` platform.",
          "type": "string",
          "const": "aarch64-manylinux_2_36"
        },
        {
          "description": "An ARM64 target for the `manylinux_2_37` platform.",
          "type": "string",
          "const": "aarch64-manylinux_2_37"
        },
        {
          "description": "An ARM64 target for the `manylinux_2_38` platform.",
          "type": "string",
          "const": "aarch64-manylinux_2_38"
        },
        {
          "description": "An ARM64 target for the `manylinux_2_39` platform.",
          "type": "string",
          "const": "aarch64-manylinux_2_39"
        },
        {
          "description": "An ARM64 target for the `manylinux_2_40` platform.",
          "type": "string",
          "const": "aarch64-manylinux_2_40"
        }
      ]
    },
    "ToolUvSources": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Sources"
      }
    },
    "ToolUvWorkspace": {
      "type": "object",
      "properties": {
        "exclude": {
          "description": "Packages to exclude as workspace members. If a package matches both `members` and\n `exclude`, it will be excluded.\n\n Supports both globs and explicit paths.\n\n For more information on the glob syntax, refer to the [`glob` documentation](https://docs.rs/glob/latest/glob/struct.Pattern.html).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/string"
          }
        },
        "members": {
          "description": "Packages to include as workspace members.\n\n Supports both globs and explicit paths.\n\n For more information on the glob syntax, refer to the [`glob` documentation](https://docs.rs/glob/latest/glob/struct.Pattern.html).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/string"
          }
        }
      },
      "additionalProperties": false
    },
    "TorchMode": {
      "description": "The strategy to use when determining the appropriate PyTorch index.",
      "oneOf": [
        {
          "description": "Select the appropriate PyTorch index based on the operating system and CUDA driver version.",
          "type": "string",
          "const": "auto"
        },
        {
          "description": "Use the CPU-only PyTorch index.",
          "type": "string",
          "const": "cpu"
        },
        {
          "description": "Use the PyTorch index for CUDA 12.8.",
          "type": "string",
          "const": "cu128"
        },
        {
          "description": "Use the PyTorch index for CUDA 12.6.",
          "type": "string",
          "const": "cu126"
        },
        {
          "description": "Use the PyTorch index for CUDA 12.5.",
          "type": "string",
          "const": "cu125"
        },
        {
          "description": "Use the PyTorch index for CUDA 12.4.",
          "type": "string",
          "const": "cu124"
        },
        {
          "description": "Use the PyTorch index for CUDA 12.3.",
          "type": "string",
          "const": "cu123"
        },
        {
          "description": "Use the PyTorch index for CUDA 12.2.",
          "type": "string",
          "const": "cu122"
        },
        {
          "description": "Use the PyTorch index for CUDA 12.1.",
          "type": "string",
          "const": "cu121"
        },
        {
          "description": "Use the PyTorch index for CUDA 12.0.",
          "type": "string",
          "const": "cu120"
        },
        {
          "description": "Use the PyTorch index for CUDA 11.8.",
          "type": "string",
          "const": "cu118"
        },
        {
          "description": "Use the PyTorch index for CUDA 11.7.",
          "type": "string",
          "const": "cu117"
        },
        {
          "description": "Use the PyTorch index for CUDA 11.6.",
          "type": "string",
          "const": "cu116"
        },
        {
          "description": "Use the PyTorch index for CUDA 11.5.",
          "type": "string",
          "const": "cu115"
        },
        {
          "description": "Use the PyTorch index for CUDA 11.4.",
          "type": "string",
          "const": "cu114"
        },
        {
          "description": "Use the PyTorch index for CUDA 11.3.",
          "type": "string",
          "const": "cu113"
        },
        {
          "description": "Use the PyTorch index for CUDA 11.2.",
          "type": "string",
          "const": "cu112"
        },
        {
          "description": "Use the PyTorch index for CUDA 11.1.",
          "type": "string",
          "const": "cu111"
        },
        {
          "description": "Use the PyTorch index for CUDA 11.0.",
          "type": "string",
          "const": "cu110"
        },
        {
          "description": "Use the PyTorch index for CUDA 10.2.",
          "type": "string",
          "const": "cu102"
        },
        {
          "description": "Use the PyTorch index for CUDA 10.1.",
          "type": "string",
          "const": "cu101"
        },
        {
          "description": "Use the PyTorch index for CUDA 10.0.",
          "type": "string",
          "const": "cu100"
        },
        {
          "description": "Use the PyTorch index for CUDA 9.2.",
          "type": "string",
          "const": "cu92"
        },
        {
          "description": "Use the PyTorch index for CUDA 9.1.",
          "type": "string",
          "const": "cu91"
        },
        {
          "description": "Use the PyTorch index for CUDA 9.0.",
          "type": "string",
          "const": "cu90"
        },
        {
          "description": "Use the PyTorch index for CUDA 8.0.",
          "type": "string",
          "const": "cu80"
        }
      ]
    },
    "TrustedHost": {
      "description": "A host or host-port pair.",
      "type": "string"
    },
    "TrustedPublishing": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "always",
            "never"
          ]
        },
        {
          "description": "Try trusted publishing when we're already in GitHub Actions, continue if that fails.",
          "type": "string",
          "const": "automatic"
        }
      ]
    },
    "WheelDataIncludes": {
      "description": "Data includes for wheels.\n\n See `BuildBackendSettings::data`.",
      "type": "object",
      "properties": {
        "data": {
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "headers": {
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "platlib": {
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "purelib": {
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "scripts": {
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      },
      "additionalProperties": false
    },
    "string": {
      "type": "string"
    }
  }
}