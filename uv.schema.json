{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CombinedOptions",
  "description": "Metadata and configuration for uv.",
  "type": "object",
  "properties": {
    "allow-insecure-host": {
      "description": "Allow insecure connections to host.\n\nExpects to receive either a hostname (e.g., `localhost`), a host-port pair (e.g., `localhost:8080`), or a URL (e.g., `https://localhost`).\n\nWARNING: Hosts included in this list will not be verified against the system's certificate store. Only use `--allow-insecure-host` in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/TrustedHost"
      }
    },
    "cache-dir": {
      "description": "Path to the cache directory.\n\nDefaults to `$HOME/Library/Caches/uv` on macOS, `$XDG_CACHE_HOME/uv` or `$HOME/.cache/uv` on Linux, and `%LOCALAPPDATA%\\uv\\cache` on Windows.",
      "type": [
        "string",
        "null"
      ]
    },
    "cache-keys": {
      "description": "The keys to consider when caching builds for the project.\n\nCache keys enable you to specify the files or directories that should trigger a rebuild when modified. By default, uv will rebuild a project whenever the `pyproject.toml`, `setup.py`, or `setup.cfg` files in the project directory are modified, i.e.:\n\n```toml cache-keys = [{ file = \"pyproject.toml\" }, { file = \"setup.py\" }, { file = \"setup.cfg\" }] ```\n\nAs an example: if a project uses dynamic metadata to read its dependencies from a `requirements.txt` file, you can specify `cache-keys = [{ file = \"requirements.txt\" }, { file = \"pyproject.toml\" }]` to ensure that the project is rebuilt whenever the `requirements.txt` file is modified (in addition to watching the `pyproject.toml`).\n\nGlobs are supported, following the syntax of the [`glob`](https://docs.rs/glob/0.3.1/glob/struct.Pattern.html) crate. For example, to invalidate the cache whenever a `.toml` file in the project directory or any of its subdirectories is modified, you can specify `cache-keys = [{ file = \"**/*.toml\" }]`. Note that the use of globs can be expensive, as uv may need to walk the filesystem to determine whether any files have changed.\n\nCache keys can also include version control information. For example, if a project uses `setuptools_scm` to read its version from a Git tag, you can specify `cache-keys = [{ git = true }, { file = \"pyproject.toml\" }]` to include the current Git commit hash in the cache key (in addition to the `pyproject.toml`).\n\nCache keys only affect the project defined by the `pyproject.toml` in which they're specified (as opposed to, e.g., affecting all members in a workspace), and all paths and globs are interpreted as relative to the project directory.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/CacheKey"
      }
    },
    "compile-bytecode": {
      "description": "Compile Python files to bytecode after installation.\n\nBy default, uv does not compile Python (`.py`) files to bytecode (`__pycache__/*.pyc`); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.\n\nWhen enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "concurrent-builds": {
      "description": "The maximum number of source distributions that uv will build concurrently at any given time.\n\nDefaults to the number of available CPU cores.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint",
      "minimum": 1.0
    },
    "concurrent-downloads": {
      "description": "The maximum number of in-flight concurrent downloads that uv will perform at any given time.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint",
      "minimum": 1.0
    },
    "concurrent-installs": {
      "description": "The number of threads used when installing and unzipping packages.\n\nDefaults to the number of available CPU cores.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint",
      "minimum": 1.0
    },
    "config-settings": {
      "description": "Settings to pass to the [PEP 517](https://peps.python.org/pep-0517/) build backend, specified as `KEY=VALUE` pairs.",
      "anyOf": [
        {
          "$ref": "#/definitions/ConfigSettings"
        },
        {
          "type": "null"
        }
      ]
    },
    "constraint-dependencies": {
      "description": "PEP 508-style requirements, e.g., `ruff==0.5.0`, or `ruff @ https://...`.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "dependency-metadata": {
      "description": "Pre-defined static metadata for dependencies of the project (direct or transitive). When provided, enables the resolver to use the specified metadata instead of querying the registry or building the relevant package from source.\n\nMetadata should be provided in adherence with the [Metadata 2.3](https://packaging.python.org/en/latest/specifications/core-metadata/) standard, though only the following fields are respected:\n\n- `name`: The name of the package. - (Optional) `version`: The version of the package. If omitted, the metadata will be applied to all versions of the package. - (Optional) `requires-dist`: The dependencies of the package (e.g., `werkzeug>=0.14`). - (Optional) `requires-python`: The Python version required by the package (e.g., `>=3.10`). - (Optional) `provides-extras`: The extras provided by the package.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/StaticMetadata"
      }
    },
    "dev-dependencies": {
      "description": "PEP 508-style requirements, e.g., `ruff==0.5.0`, or `ruff @ https://...`.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "environments": {
      "description": "A list of environment markers, e.g., `python_version >= '3.6'`.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "exclude-newer": {
      "description": "Limit candidate packages to those that were uploaded prior to the given date.\n\nAccepts both [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html) timestamps (e.g., `2006-12-02T02:07:43Z`) and local dates in the same format (e.g., `2006-12-02`) in your system's configured time zone.",
      "anyOf": [
        {
          "$ref": "#/definitions/ExcludeNewer"
        },
        {
          "type": "null"
        }
      ]
    },
    "extra-index-url": {
      "description": "Extra URLs of package indexes to use, in addition to `--index-url`.\n\nAccepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/) (the simple repository API), or a local directory laid out in the same format.\n\nAll indexes provided via this flag take priority over the index specified by [`index_url`](#index-url) or [`index`](#index) with `default = true`. When multiple indexes are provided, earlier values take priority.\n\nTo control uv's resolution strategy when multiple indexes are present, see [`index_strategy`](#index-strategy).\n\n(Deprecated: use `index` instead.)",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/IndexUrl"
      }
    },
    "find-links": {
      "description": "Locations to search for candidate distributions, in addition to those found in the registry indexes.\n\nIf a path, the target must be a directory that contains packages as wheel files (`.whl`) or source distributions (e.g., `.tar.gz` or `.zip`) at the top level.\n\nIf a URL, the page must contain a flat list of links to package files adhering to the formats described above.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/FlatIndexLocation"
      }
    },
    "index": {
      "description": "The indexes to use when resolving dependencies.\n\nAccepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/) (the simple repository API), or a local directory laid out in the same format.\n\nIndexes are considered in the order in which they're defined, such that the first-defined index has the highest priority. Further, the indexes provided by this setting are given higher priority than any indexes specified via [`index_url`](#index-url) or [`extra_index_url`](#extra-index-url). uv will only consider the first index that contains a given package, unless an alternative [index strategy](#index-strategy) is specified.\n\nIf an index is marked as `explicit = true`, it will be used exclusively for those dependencies that select it explicitly via `[tool.uv.sources]`, as in:\n\n```toml [[tool.uv.index]] name = \"pytorch\" url = \"https://download.pytorch.org/whl/cu121\" explicit = true\n\n[tool.uv.sources] torch = { index = \"pytorch\" } ```\n\nIf an index is marked as `default = true`, it will be moved to the end of the prioritized list, such that it is given the lowest priority when resolving packages. Additionally, marking an index as default will disable the PyPI default index.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/Index"
      }
    },
    "index-strategy": {
      "description": "The strategy to use when resolving against multiple index URLs.\n\nBy default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (`first-match`). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.",
      "anyOf": [
        {
          "$ref": "#/definitions/IndexStrategy"
        },
        {
          "type": "null"
        }
      ]
    },
    "index-url": {
      "description": "The URL of the Python package index (by default: <https://pypi.org/simple>).\n\nAccepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/) (the simple repository API), or a local directory laid out in the same format.\n\nThe index provided by this setting is given lower priority than any indexes specified via [`extra_index_url`](#extra-index-url) or [`index`](#index).\n\n(Deprecated: use `index` instead.)",
      "anyOf": [
        {
          "$ref": "#/definitions/IndexUrl"
        },
        {
          "type": "null"
        }
      ]
    },
    "keyring-provider": {
      "description": "Attempt to use `keyring` for authentication for index URLs.\n\nAt present, only `--keyring-provider subprocess` is supported, which configures uv to use the `keyring` CLI to handle authentication.",
      "anyOf": [
        {
          "$ref": "#/definitions/KeyringProviderType"
        },
        {
          "type": "null"
        }
      ]
    },
    "link-mode": {
      "description": "The method to use when installing packages from the global cache.\n\nDefaults to `clone` (also known as Copy-on-Write) on macOS, and `hardlink` on Linux and Windows.",
      "anyOf": [
        {
          "$ref": "#/definitions/LinkMode"
        },
        {
          "type": "null"
        }
      ]
    },
    "managed": {
      "description": "Whether the project is managed by uv. If `false`, uv will ignore the project when `uv run` is invoked.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "native-tls": {
      "description": "Whether to load TLS certificates from the platform's native certificate store.\n\nBy default, uv loads certificates from the bundled `webpki-roots` crate. The `webpki-roots` are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).\n\nHowever, in some cases, you may want to use the platform's native certificate store, especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your system's certificate store.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "no-binary": {
      "description": "Don't install pre-built wheels.\n\nThe given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "no-binary-package": {
      "description": "Don't install pre-built wheels for a specific package.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/PackageName"
      }
    },
    "no-build": {
      "description": "Don't build source distributions.\n\nWhen enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "no-build-isolation": {
      "description": "Disable isolation when building source distributions.\n\nAssumes that build dependencies specified by [PEP 518](https://peps.python.org/pep-0518/) are already installed.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "no-build-isolation-package": {
      "description": "Disable isolation when building source distributions for a specific package.\n\nAssumes that the packages' build dependencies specified by [PEP 518](https://peps.python.org/pep-0518/) are already installed.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/PackageName"
      }
    },
    "no-build-package": {
      "description": "Don't build source distributions for a specific package.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/PackageName"
      }
    },
    "no-cache": {
      "description": "Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "no-index": {
      "description": "Ignore all registry indexes (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "no-sources": {
      "description": "Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "offline": {
      "description": "Disable network access, relying only on locally cached data and locally available files.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "override-dependencies": {
      "description": "PEP 508-style requirements, e.g., `ruff==0.5.0`, or `ruff @ https://...`.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "package": {
      "description": "Whether the project should be considered a Python package, or a non-package (\"virtual\") project.\n\nPackages are built and installed into the virtual environment in editable mode and thus require a build backend, while virtual projects are _not_ built or installed; instead, only their dependencies are included in the virtual environment.\n\nCreating a package requires that a `build-system` is present in the `pyproject.toml`, and that the project adheres to a structure that adheres to the build backend's expectations (e.g., a `src` layout).",
      "type": [
        "boolean",
        "null"
      ]
    },
    "pip": {
      "anyOf": [
        {
          "$ref": "#/definitions/PipOptions"
        },
        {
          "type": "null"
        }
      ]
    },
    "prerelease": {
      "description": "The strategy to use when considering pre-release versions.\n\nBy default, uv will accept pre-releases for packages that _only_ publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (`if-necessary-or-explicit`).",
      "anyOf": [
        {
          "$ref": "#/definitions/PrereleaseMode"
        },
        {
          "type": "null"
        }
      ]
    },
    "preview": {
      "description": "Whether to enable experimental, preview features.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "publish-url": {
      "description": "The URL for publishing packages to the Python package index (by default: <https://upload.pypi.org/legacy/>).",
      "type": [
        "string",
        "null"
      ],
      "format": "uri"
    },
    "python-downloads": {
      "description": "Whether to allow Python downloads.",
      "anyOf": [
        {
          "$ref": "#/definitions/PythonDownloads"
        },
        {
          "type": "null"
        }
      ]
    },
    "python-preference": {
      "description": "Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv.",
      "anyOf": [
        {
          "$ref": "#/definitions/PythonPreference"
        },
        {
          "type": "null"
        }
      ]
    },
    "reinstall": {
      "description": "Reinstall all packages, regardless of whether they're already installed. Implies `refresh`.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "reinstall-package": {
      "description": "Reinstall a specific package, regardless of whether it's already installed. Implies `refresh-package`.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/PackageName"
      }
    },
    "resolution": {
      "description": "The strategy to use when selecting between the different compatible versions for a given package requirement.\n\nBy default, uv will use the latest compatible version of each package (`highest`).",
      "anyOf": [
        {
          "$ref": "#/definitions/ResolutionMode"
        },
        {
          "type": "null"
        }
      ]
    },
    "sources": {
      "description": "The sources to use (e.g., workspace members, Git repositories, local paths) when resolving dependencies.",
      "anyOf": [
        {
          "$ref": "#/definitions/ToolUvSources"
        },
        {
          "type": "null"
        }
      ]
    },
    "trusted-publishing": {
      "description": "Configure trusted publishing via GitHub Actions.\n\nBy default, uv checks for trusted publishing when running in GitHub Actions, but ignores it if it isn't configured or the workflow doesn't have enough permissions (e.g., a pull request from a fork).",
      "anyOf": [
        {
          "$ref": "#/definitions/TrustedPublishing"
        },
        {
          "type": "null"
        }
      ]
    },
    "upgrade": {
      "description": "Allow package upgrades, ignoring pinned versions in any existing output file.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "upgrade-package": {
      "description": "Allow upgrades for a specific package, ignoring pinned versions in any existing output file.\n\nAccepts both standalone package names (`ruff`) and version specifiers (`ruff<0.5.0`).",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/Requirement"
      }
    },
    "workspace": {
      "description": "The workspace definition for the project, if any.",
      "anyOf": [
        {
          "$ref": "#/definitions/ToolUvWorkspace"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "AnnotationStyle": {
      "description": "Indicate the style of annotation comments, used to indicate the dependencies that requested each package.",
      "oneOf": [
        {
          "description": "Render the annotations on a single, comma-separated line.",
          "type": "string",
          "enum": [
            "line"
          ]
        },
        {
          "description": "Render each annotation on its own line.",
          "type": "string",
          "enum": [
            "split"
          ]
        }
      ]
    },
    "CacheKey": {
      "anyOf": [
        {
          "description": "Ex) `\"Cargo.lock\"` or `\"**/*.toml\"`",
          "type": "string"
        },
        {
          "description": "Ex) `{ file = \"Cargo.lock\" }` or `{ file = \"**/*.toml\" }`",
          "type": "object",
          "required": [
            "file"
          ],
          "properties": {
            "file": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Ex) `{ git = true }`",
          "type": "object",
          "required": [
            "git"
          ],
          "properties": {
            "git": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ConfigSettingValue": {
      "oneOf": [
        {
          "description": "The value consists of a single string.",
          "type": "object",
          "required": [
            "String"
          ],
          "properties": {
            "String": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The value consists of a list of strings.",
          "type": "object",
          "required": [
            "List"
          ],
          "properties": {
            "List": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ConfigSettings": {
      "description": "Settings to pass to a PEP 517 build backend, structured as a map from (string) key to string or list of strings.\n\nSee: <https://peps.python.org/pep-0517/#config-settings>",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ConfigSettingValue"
      }
    },
    "ExcludeNewer": {
      "description": "Exclude distributions uploaded after the given timestamp.\n\nAccepts both RFC 3339 timestamps (e.g., `2006-12-02T02:07:43Z`) and local dates in the same format (e.g., `2006-12-02`).",
      "type": "string",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:\\d{2}))?$"
    },
    "ExtraName": {
      "description": "The normalized name of an extra dependency.\n\nConverts the name to lowercase and collapses runs of `-`, `_`, and `.` down to a single `-`. For example, `---`, `.`, and `__` are all converted to a single `-`.\n\nSee: - <https://peps.python.org/pep-0685/#specification/> - <https://packaging.python.org/en/latest/specifications/name-normalization/>",
      "type": "string"
    },
    "FlatIndexLocation": {
      "description": "The path to a directory of distributions, or a URL to an HTML file with a flat listing of distributions.",
      "type": "string"
    },
    "Index": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "default": {
          "description": "Mark the index as the default index.\n\nBy default, uv uses PyPI as the default index, such that even if additional indexes are defined via `[[tool.uv.index]]`, PyPI will still be used as a fallback for packages that aren't found elsewhere. To disable the PyPI default, set `default = true` on at least one other index.\n\nMarking an index as default will move it to the front of the list of indexes, such that it is given the highest priority when resolving packages.",
          "default": false,
          "type": "boolean"
        },
        "explicit": {
          "description": "Mark the index as explicit.\n\nExplicit indexes will _only_ be used when explicitly requested via a `[tool.uv.sources]` definition, as in:\n\n```toml [[tool.uv.index]] name = \"pytorch\" url = \"https://download.pytorch.org/whl/cu121\" explicit = true\n\n[tool.uv.sources] torch = { index = \"pytorch\" } ```",
          "default": false,
          "type": "boolean"
        },
        "name": {
          "description": "The name of the index.\n\nIndex names can be used to reference indexes elsewhere in the configuration. For example, you can pin a package to a specific index by name:\n\n```toml [[tool.uv.index]] name = \"pytorch\" url = \"https://download.pytorch.org/whl/cu121\"\n\n[tool.uv.sources] torch = { index = \"pytorch\" } ```",
          "type": [
            "string",
            "null"
          ]
        },
        "url": {
          "description": "The URL of the index.\n\nExpects to receive a URL (e.g., `https://pypi.org/simple`) or a local path.",
          "allOf": [
            {
              "$ref": "#/definitions/IndexUrl"
            }
          ]
        }
      }
    },
    "IndexStrategy": {
      "oneOf": [
        {
          "description": "Only use results from the first index that returns a match for a given package name.\n\nWhile this differs from pip's behavior, it's the default index strategy as it's the most secure.",
          "type": "string",
          "enum": [
            "first-index"
          ]
        },
        {
          "description": "Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next.\n\nIn this strategy, we look for every package across all indexes. When resolving, we attempt to use versions from the indexes in order, such that we exhaust all available versions from the first index before moving on to the next. Further, if a version is found to be incompatible in the first index, we do not reconsider that version in subsequent indexes, even if the secondary index might contain compatible versions (e.g., variants of the same versions with different ABI tags or Python version constraints).\n\nSee: <https://peps.python.org/pep-0708/>",
          "type": "string",
          "enum": [
            "unsafe-first-match"
          ]
        },
        {
          "description": "Search for every package name across all indexes, preferring the \"best\" version found. If a package version is in multiple indexes, only look at the entry for the first index.\n\nIn this strategy, we look for every package across all indexes. When resolving, we consider all versions from all indexes, choosing the \"best\" version found (typically, the highest compatible version).\n\nThis most closely matches pip's behavior, but exposes the resolver to \"dependency confusion\" attacks whereby malicious actors can publish packages to public indexes with the same name as internal packages, causing the resolver to install the malicious package in lieu of the intended internal package.\n\nSee: <https://peps.python.org/pep-0708/>",
          "type": "string",
          "enum": [
            "unsafe-best-match"
          ]
        }
      ]
    },
    "IndexUrl": {
      "description": "The URL of an index to use for fetching packages (e.g., `https://pypi.org/simple`).",
      "type": "string"
    },
    "KeyringProviderType": {
      "description": "Keyring provider type to use for credential lookup.",
      "oneOf": [
        {
          "description": "Do not use keyring for credential lookup.",
          "type": "string",
          "enum": [
            "disabled"
          ]
        },
        {
          "description": "Use the `keyring` command for credential lookup.",
          "type": "string",
          "enum": [
            "subprocess"
          ]
        }
      ]
    },
    "LinkMode": {
      "oneOf": [
        {
          "description": "Clone (i.e., copy-on-write) packages from the wheel into the `site-packages` directory.",
          "type": "string",
          "enum": [
            "clone"
          ]
        },
        {
          "description": "Copy packages from the wheel into the `site-packages` directory.",
          "type": "string",
          "enum": [
            "copy"
          ]
        },
        {
          "description": "Hard link packages from the wheel into the `site-packages` directory.",
          "type": "string",
          "enum": [
            "hardlink"
          ]
        },
        {
          "description": "Symbolically link packages from the wheel into the `site-packages` directory.\n\nWARNING: The use of symlinks is discouraged, as they create tight coupling between the cache and the target environment. For example, clearing the cache (`uv cache clear`) will break all installed packages by way of removing the underlying source files. Use symlinks with caution.",
          "type": "string",
          "enum": [
            "symlink"
          ]
        }
      ]
    },
    "MarkerTree": {
      "description": "A PEP 508-compliant marker expression, e.g., `sys_platform == 'Darwin'`",
      "type": "string"
    },
    "PackageName": {
      "description": "The normalized name of a package.\n\nConverts the name to lowercase and collapses runs of `-`, `_`, and `.` down to a single `-`. For example, `---`, `.`, and `__` are all converted to a single `-`.\n\nSee: <https://packaging.python.org/en/latest/specifications/name-normalization/>",
      "type": "string"
    },
    "PackageNameSpecifier": {
      "description": "The name of a package, or `:all:` or `:none:` to select or omit all packages, respectively.",
      "type": "string",
      "pattern": "^(:none:|:all:|([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9]))$"
    },
    "PipOptions": {
      "description": "Settings that are specific to the `uv pip` command-line interface.\n\nThese values will be ignored when running commands outside the `uv pip` namespace (e.g., `uv lock`, `uvx`).",
      "type": "object",
      "properties": {
        "all-extras": {
          "description": "Include all optional dependencies.\n\nOnly applies to `pyproject.toml`, `setup.py`, and `setup.cfg` sources.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "allow-empty-requirements": {
          "description": "Allow `uv pip sync` with empty requirements, which will clear the environment of all packages.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "allow-insecure-host": {
          "description": "Allow insecure connections to host.\n\nExpects to receive either a hostname (e.g., `localhost`), a host-port pair (e.g., `localhost:8080`), or a URL (e.g., `https://localhost`).\n\nWARNING: Hosts included in this list will not be verified against the system's certificate store. Only use `--allow-insecure-host` in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/TrustedHost"
          }
        },
        "annotation-style": {
          "description": "The style of the annotation comments included in the output file, used to indicate the source of each package.",
          "anyOf": [
            {
              "$ref": "#/definitions/AnnotationStyle"
            },
            {
              "type": "null"
            }
          ]
        },
        "break-system-packages": {
          "description": "Allow uv to modify an `EXTERNALLY-MANAGED` Python installation.\n\nWARNING: `--break-system-packages` is intended for use in continuous integration (CI) environments, when installing into Python installations that are managed by an external package manager, like `apt`. It should be used with caution, as such Python installations explicitly recommend against modifications by other package managers (like uv or pip).",
          "type": [
            "boolean",
            "null"
          ]
        },
        "compile-bytecode": {
          "description": "Compile Python files to bytecode after installation.\n\nBy default, uv does not compile Python (`.py`) files to bytecode (`__pycache__/*.pyc`); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.\n\nWhen enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "config-settings": {
          "description": "Settings to pass to the [PEP 517](https://peps.python.org/pep-0517/) build backend, specified as `KEY=VALUE` pairs.",
          "anyOf": [
            {
              "$ref": "#/definitions/ConfigSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "custom-compile-command": {
          "description": "The header comment to include at the top of the output file generated by `uv pip compile`.\n\nUsed to reflect custom build scripts and commands that wrap `uv pip compile`.",
          "type": [
            "string",
            "null"
          ]
        },
        "dependency-metadata": {
          "description": "Pre-defined static metadata for dependencies of the project (direct or transitive). When provided, enables the resolver to use the specified metadata instead of querying the registry or building the relevant package from source.\n\nMetadata should be provided in adherence with the [Metadata 2.3](https://packaging.python.org/en/latest/specifications/core-metadata/) standard, though only the following fields are respected:\n\n- `name`: The name of the package. - (Optional) `version`: The version of the package. If omitted, the metadata will be applied to all versions of the package. - (Optional) `requires-dist`: The dependencies of the package (e.g., `werkzeug>=0.14`). - (Optional) `requires-python`: The Python version required by the package (e.g., `>=3.10`). - (Optional) `provides-extras`: The extras provided by the package.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/StaticMetadata"
          }
        },
        "emit-build-options": {
          "description": "Include `--no-binary` and `--only-binary` entries in the output file generated by `uv pip compile`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "emit-find-links": {
          "description": "Include `--find-links` entries in the output file generated by `uv pip compile`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "emit-index-annotation": {
          "description": "Include comment annotations indicating the index used to resolve each package (e.g., `# from https://pypi.org/simple`).",
          "type": [
            "boolean",
            "null"
          ]
        },
        "emit-index-url": {
          "description": "Include `--index-url` and `--extra-index-url` entries in the output file generated by `uv pip compile`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "emit-marker-expression": {
          "description": "Whether to emit a marker string indicating the conditions under which the set of pinned dependencies is valid.\n\nThe pinned dependencies may be valid even when the marker expression is false, but when the expression is true, the requirements are known to be correct.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "exclude-newer": {
          "description": "Limit candidate packages to those that were uploaded prior to the given date.\n\nAccepts both [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html) timestamps (e.g., `2006-12-02T02:07:43Z`) and local dates in the same format (e.g., `2006-12-02`) in your system's configured time zone.",
          "anyOf": [
            {
              "$ref": "#/definitions/ExcludeNewer"
            },
            {
              "type": "null"
            }
          ]
        },
        "extra": {
          "description": "Include optional dependencies from the extra group name; may be provided more than once.\n\nOnly applies to `pyproject.toml`, `setup.py`, and `setup.cfg` sources.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/ExtraName"
          }
        },
        "extra-index-url": {
          "description": "Extra URLs of package indexes to use, in addition to `--index-url`.\n\nAccepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/) (the simple repository API), or a local directory laid out in the same format.\n\nAll indexes provided via this flag take priority over the index specified by [`index_url`](#index-url). When multiple indexes are provided, earlier values take priority.\n\nTo control uv's resolution strategy when multiple indexes are present, see [`index_strategy`](#index-strategy).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/IndexUrl"
          }
        },
        "find-links": {
          "description": "Locations to search for candidate distributions, in addition to those found in the registry indexes.\n\nIf a path, the target must be a directory that contains packages as wheel files (`.whl`) or source distributions (e.g., `.tar.gz` or `.zip`) at the top level.\n\nIf a URL, the page must contain a flat list of links to package files adhering to the formats described above.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/FlatIndexLocation"
          }
        },
        "generate-hashes": {
          "description": "Include distribution hashes in the output file.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "index-strategy": {
          "description": "The strategy to use when resolving against multiple index URLs.\n\nBy default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (`first-match`). This prevents \"dependency confusion\" attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.",
          "anyOf": [
            {
              "$ref": "#/definitions/IndexStrategy"
            },
            {
              "type": "null"
            }
          ]
        },
        "index-url": {
          "description": "The URL of the Python package index (by default: <https://pypi.org/simple>).\n\nAccepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/) (the simple repository API), or a local directory laid out in the same format.\n\nThe index provided by this setting is given lower priority than any indexes specified via [`extra_index_url`](#extra-index-url).",
          "anyOf": [
            {
              "$ref": "#/definitions/IndexUrl"
            },
            {
              "type": "null"
            }
          ]
        },
        "keyring-provider": {
          "description": "Attempt to use `keyring` for authentication for index URLs.\n\nAt present, only `--keyring-provider subprocess` is supported, which configures uv to use the `keyring` CLI to handle authentication.",
          "anyOf": [
            {
              "$ref": "#/definitions/KeyringProviderType"
            },
            {
              "type": "null"
            }
          ]
        },
        "link-mode": {
          "description": "The method to use when installing packages from the global cache.\n\nDefaults to `clone` (also known as Copy-on-Write) on macOS, and `hardlink` on Linux and Windows.",
          "anyOf": [
            {
              "$ref": "#/definitions/LinkMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "no-annotate": {
          "description": "Exclude comment annotations indicating the source of each package from the output file generated by `uv pip compile`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-binary": {
          "description": "Don't install pre-built wheels.\n\nThe given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.\n\nMultiple packages may be provided. Disable binaries for all packages with `:all:`. Clear previously specified packages with `:none:`.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PackageNameSpecifier"
          }
        },
        "no-build": {
          "description": "Don't build source distributions.\n\nWhen enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.\n\nAlias for `--only-binary :all:`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-build-isolation": {
          "description": "Disable isolation when building source distributions.\n\nAssumes that build dependencies specified by [PEP 518](https://peps.python.org/pep-0518/) are already installed.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-build-isolation-package": {
          "description": "Disable isolation when building source distributions for a specific package.\n\nAssumes that the packages' build dependencies specified by [PEP 518](https://peps.python.org/pep-0518/) are already installed.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PackageName"
          }
        },
        "no-deps": {
          "description": "Ignore package dependencies, instead only add those packages explicitly listed on the command line to the resulting the requirements file.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-emit-package": {
          "description": "Specify a package to omit from the output resolution. Its dependencies will still be included in the resolution. Equivalent to pip-compile's `--unsafe-package` option.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PackageName"
          }
        },
        "no-header": {
          "description": "Exclude the comment header at the top of output file generated by `uv pip compile`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-index": {
          "description": "Ignore all registry indexes (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-sources": {
          "description": "Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-strip-extras": {
          "description": "Include extras in the output file.\n\nBy default, uv strips extras, as any packages pulled in by the extras are already included as dependencies in the output file directly. Further, output files generated with `--no-strip-extras` cannot be used as constraints files in `install` and `sync` invocations.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "no-strip-markers": {
          "description": "Include environment markers in the output file generated by `uv pip compile`.\n\nBy default, uv strips environment markers, as the resolution generated by `compile` is only guaranteed to be correct for the target environment.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "only-binary": {
          "description": "Only use pre-built wheels; don't build source distributions.\n\nWhen enabled, resolving will not run code from the given packages. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.\n\nMultiple packages may be provided. Disable binaries for all packages with `:all:`. Clear previously specified packages with `:none:`.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PackageNameSpecifier"
          }
        },
        "output-file": {
          "description": "Write the requirements generated by `uv pip compile` to the given `requirements.txt` file.\n\nIf the file already exists, the existing versions will be preferred when resolving dependencies, unless `--upgrade` is also specified.",
          "type": [
            "string",
            "null"
          ]
        },
        "prefix": {
          "description": "Install packages into `lib`, `bin`, and other top-level folders under the specified directory, as if a virtual environment were present at that location.\n\nIn general, prefer the use of `--python` to install into an alternate environment, as scripts and other artifacts installed via `--prefix` will reference the installing interpreter, rather than any interpreter added to the `--prefix` directory, rendering them non-portable.",
          "type": [
            "string",
            "null"
          ]
        },
        "prerelease": {
          "description": "The strategy to use when considering pre-release versions.\n\nBy default, uv will accept pre-releases for packages that _only_ publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (`if-necessary-or-explicit`).",
          "anyOf": [
            {
              "$ref": "#/definitions/PrereleaseMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "python": {
          "description": "The Python interpreter into which packages should be installed.\n\nBy default, uv installs into the virtual environment in the current working directory or any parent directory. The `--python` option allows you to specify a different interpreter, which is intended for use in continuous integration (CI) environments or other automated workflows.\n\nSupported formats: - `3.10` looks for an installed Python 3.10 in the registry on Windows (see `py --list-paths`), or `python3.10` on Linux and macOS. - `python3.10` or `python.exe` looks for a binary with the given name in `PATH`. - `/home/ferris/.local/bin/python3.10` uses the exact Python at the given path.",
          "type": [
            "string",
            "null"
          ]
        },
        "python-platform": {
          "description": "The platform for which requirements should be resolved.\n\nRepresented as a \"target triple\", a string that describes the target platform in terms of its CPU, vendor, and operating system name, like `x86_64-unknown-linux-gnu` or `aarch64-apple-darwin`.",
          "anyOf": [
            {
              "$ref": "#/definitions/TargetTriple"
            },
            {
              "type": "null"
            }
          ]
        },
        "python-version": {
          "description": "The minimum Python version that should be supported by the resolved requirements (e.g., `3.8` or `3.8.17`).\n\nIf a patch version is omitted, the minimum patch version is assumed. For example, `3.8` is mapped to `3.8.0`.",
          "anyOf": [
            {
              "$ref": "#/definitions/PythonVersion"
            },
            {
              "type": "null"
            }
          ]
        },
        "reinstall": {
          "description": "Reinstall all packages, regardless of whether they're already installed. Implies `refresh`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "reinstall-package": {
          "description": "Reinstall a specific package, regardless of whether it's already installed. Implies `refresh-package`.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PackageName"
          }
        },
        "require-hashes": {
          "description": "Require a matching hash for each requirement.\n\nHash-checking mode is all or nothing. If enabled, _all_ requirements must be provided with a corresponding hash or set of hashes. Additionally, if enabled, _all_ requirements must either be pinned to exact versions (e.g., `==1.0.0`), or be specified via direct URL.\n\nHash-checking mode introduces a number of additional constraints:\n\n- Git dependencies are not supported. - Editable installs are not supported. - Local dependencies are not supported, unless they point to a specific wheel (`.whl`) or source archive (`.zip`, `.tar.gz`), as opposed to a directory.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "resolution": {
          "description": "The strategy to use when selecting between the different compatible versions for a given package requirement.\n\nBy default, uv will use the latest compatible version of each package (`highest`).",
          "anyOf": [
            {
              "$ref": "#/definitions/ResolutionMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "strict": {
          "description": "Validate the Python environment, to detect packages with missing dependencies and other issues.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "system": {
          "description": "Install packages into the system Python environment.\n\nBy default, uv installs into the virtual environment in the current working directory or any parent directory. The `--system` option instructs uv to instead use the first Python found in the system `PATH`.\n\nWARNING: `--system` is intended for use in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "target": {
          "description": "Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory.",
          "type": [
            "string",
            "null"
          ]
        },
        "universal": {
          "description": "Perform a universal resolution, attempting to generate a single `requirements.txt` output file that is compatible with all operating systems, architectures, and Python implementations.\n\nIn universal mode, the current Python version (or user-provided `--python-version`) will be treated as a lower bound. For example, `--universal --python-version 3.7` would produce a universal resolution for Python 3.7 and later.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "upgrade": {
          "description": "Allow package upgrades, ignoring pinned versions in any existing output file.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "upgrade-package": {
          "description": "Allow upgrades for a specific package, ignoring pinned versions in any existing output file.\n\nAccepts both standalone package names (`ruff`) and version specifiers (`ruff<0.5.0`).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Requirement"
          }
        },
        "verify-hashes": {
          "description": "Validate any hashes provided in the requirements file.\n\nUnlike `--require-hashes`, `--verify-hashes` does not require that all requirements have hashes; instead, it will limit itself to verifying the hashes of those requirements that do include them.",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "PrereleaseMode": {
      "oneOf": [
        {
          "description": "Disallow all pre-release versions.",
          "type": "string",
          "enum": [
            "disallow"
          ]
        },
        {
          "description": "Allow all pre-release versions.",
          "type": "string",
          "enum": [
            "allow"
          ]
        },
        {
          "description": "Allow pre-release versions if all versions of a package are pre-release.",
          "type": "string",
          "enum": [
            "if-necessary"
          ]
        },
        {
          "description": "Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements.",
          "type": "string",
          "enum": [
            "explicit"
          ]
        },
        {
          "description": "Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements.",
          "type": "string",
          "enum": [
            "if-necessary-or-explicit"
          ]
        }
      ]
    },
    "PythonDownloads": {
      "oneOf": [
        {
          "description": "Automatically download managed Python installations when needed.",
          "type": "string",
          "enum": [
            "automatic"
          ]
        },
        {
          "description": "Do not automatically download managed Python installations; require explicit installation.",
          "type": "string",
          "enum": [
            "manual"
          ]
        },
        {
          "description": "Do not ever allow Python downloads.",
          "type": "string",
          "enum": [
            "never"
          ]
        }
      ]
    },
    "PythonPreference": {
      "oneOf": [
        {
          "description": "Only use managed Python installations; never use system Python installations.",
          "type": "string",
          "enum": [
            "only-managed"
          ]
        },
        {
          "description": "Prefer managed Python installations over system Python installations.\n\nSystem Python installations are still preferred over downloading managed Python versions. Use `only-managed` to always fetch a managed Python version.",
          "type": "string",
          "enum": [
            "managed"
          ]
        },
        {
          "description": "Prefer system Python installations over managed Python installations.\n\nIf a system Python installation cannot be found, a managed Python installation can be used.",
          "type": "string",
          "enum": [
            "system"
          ]
        },
        {
          "description": "Only use system Python installations; never use managed Python installations.",
          "type": "string",
          "enum": [
            "only-system"
          ]
        }
      ]
    },
    "PythonVersion": {
      "description": "A Python version specifier, e.g. `3.7` or `3.8.0`.",
      "type": "string",
      "pattern": "^3\\.\\d+(\\.\\d+)?$"
    },
    "Requirement": {
      "description": "A PEP 508 dependency specifier, e.g., `ruff >= 0.6.0`",
      "type": "string"
    },
    "ResolutionMode": {
      "oneOf": [
        {
          "description": "Resolve the highest compatible version of each package.",
          "type": "string",
          "enum": [
            "highest"
          ]
        },
        {
          "description": "Resolve the lowest compatible version of each package.",
          "type": "string",
          "enum": [
            "lowest"
          ]
        },
        {
          "description": "Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies.",
          "type": "string",
          "enum": [
            "lowest-direct"
          ]
        }
      ]
    },
    "Source": {
      "description": "A `tool.uv.sources` value.",
      "anyOf": [
        {
          "description": "A remote Git repository, available over HTTPS or SSH.\n\nExample: ```toml flask = { git = \"https://github.com/pallets/flask\", tag = \"3.0.0\" } ```",
          "type": "object",
          "required": [
            "git"
          ],
          "properties": {
            "branch": {
              "type": [
                "string",
                "null"
              ]
            },
            "git": {
              "description": "The repository URL (without the `git+` prefix).",
              "type": "string",
              "format": "uri"
            },
            "marker": {
              "$ref": "#/definitions/MarkerTree"
            },
            "rev": {
              "type": [
                "string",
                "null"
              ]
            },
            "subdirectory": {
              "description": "The path to the directory with the `pyproject.toml`, if it's not in the archive root.",
              "anyOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "type": "null"
                }
              ]
            },
            "tag": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A remote `http://` or `https://` URL, either a wheel (`.whl`) or a source distribution (`.zip`, `.tar.gz`).\n\nExample: ```toml flask = { url = \"https://files.pythonhosted.org/packages/61/80/ffe1da13ad9300f87c93af113edd0638c75138c42a0994becfacac078c06/flask-3.0.3-py3-none-any.whl\" } ```",
          "type": "object",
          "required": [
            "url"
          ],
          "properties": {
            "marker": {
              "$ref": "#/definitions/MarkerTree"
            },
            "subdirectory": {
              "description": "For source distributions, the path to the directory with the `pyproject.toml`, if it's not in the archive root.",
              "anyOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "type": "null"
                }
              ]
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The path to a dependency, either a wheel (a `.whl` file), source distribution (a `.zip` or `.tar.gz` file), or source tree (i.e., a directory containing a `pyproject.toml` or `setup.py` file in the root).",
          "type": "object",
          "required": [
            "path"
          ],
          "properties": {
            "editable": {
              "description": "`false` by default.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "marker": {
              "$ref": "#/definitions/MarkerTree"
            },
            "path": {
              "$ref": "#/definitions/String"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A dependency pinned to a specific index, e.g., `torch` after setting `torch` to `https://download.pytorch.org/whl/cu118`.",
          "type": "object",
          "required": [
            "index"
          ],
          "properties": {
            "index": {
              "type": "string"
            },
            "marker": {
              "$ref": "#/definitions/MarkerTree"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A dependency on another package in the workspace.",
          "type": "object",
          "required": [
            "workspace"
          ],
          "properties": {
            "marker": {
              "$ref": "#/definitions/MarkerTree"
            },
            "workspace": {
              "description": "When set to `false`, the package will be fetched from the remote index, rather than included as a workspace package.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Sources": {
      "$ref": "#/definitions/SourcesWire"
    },
    "SourcesWire": {
      "anyOf": [
        {
          "$ref": "#/definitions/Source"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Source"
          }
        }
      ]
    },
    "StaticMetadata": {
      "description": "A subset of the Python Package Metadata 2.3 standard as specified in <https://packaging.python.org/specifications/core-metadata/>.",
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/PackageName"
        },
        "provides-extras": {
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtraName"
          }
        },
        "requires-dist": {
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Requirement"
          }
        },
        "requires-python": {
          "description": "PEP 508-style Python requirement, e.g., `>=3.10`",
          "type": [
            "string",
            "null"
          ]
        },
        "version": {
          "description": "PEP 440-style package version, e.g., `1.2.3`",
          "type": "string"
        }
      }
    },
    "String": {
      "type": "string"
    },
    "TargetTriple": {
      "description": "The supported target triples. Each triple consists of an architecture, vendor, and operating system.\n\nSee: <https://doc.rust-lang.org/nightly/rustc/platform-support.html>",
      "oneOf": [
        {
          "description": "An alias for `x86_64-pc-windows-msvc`, the default target for Windows.",
          "type": "string",
          "enum": [
            "windows"
          ]
        },
        {
          "description": "An alias for `x86_64-unknown-linux-gnu`, the default target for Linux.",
          "type": "string",
          "enum": [
            "linux"
          ]
        },
        {
          "description": "An alias for `aarch64-apple-darwin`, the default target for macOS.",
          "type": "string",
          "enum": [
            "macos"
          ]
        },
        {
          "description": "A 64-bit x86 Windows target.",
          "type": "string",
          "enum": [
            "x86_64-pc-windows-msvc"
          ]
        },
        {
          "description": "A 32-bit x86 Windows target.",
          "type": "string",
          "enum": [
            "i686-pc-windows-msvc"
          ]
        },
        {
          "description": "An x86 Linux target. Equivalent to `x86_64-manylinux_2_17`.",
          "type": "string",
          "enum": [
            "x86_64-unknown-linux-gnu"
          ]
        },
        {
          "description": "An ARM-based macOS target, as seen on Apple Silicon devices\n\nBy default, assumes the least-recent, non-EOL macOS version (12.0), but respects the `MACOSX_DEPLOYMENT_TARGET` environment variable if set.",
          "type": "string",
          "enum": [
            "aarch64-apple-darwin"
          ]
        },
        {
          "description": "An x86 macOS target.\n\nBy default, assumes the least-recent, non-EOL macOS version (12.0), but respects the `MACOSX_DEPLOYMENT_TARGET` environment variable if set.",
          "type": "string",
          "enum": [
            "x86_64-apple-darwin"
          ]
        },
        {
          "description": "An ARM64 Linux target. Equivalent to `aarch64-manylinux_2_17`.",
          "type": "string",
          "enum": [
            "aarch64-unknown-linux-gnu"
          ]
        },
        {
          "description": "An ARM64 Linux target.",
          "type": "string",
          "enum": [
            "aarch64-unknown-linux-musl"
          ]
        },
        {
          "description": "An `x86_64` Linux target.",
          "type": "string",
          "enum": [
            "x86_64-unknown-linux-musl"
          ]
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_17` platform.",
          "type": "string",
          "enum": [
            "x86_64-manylinux_2_17"
          ]
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_28` platform.",
          "type": "string",
          "enum": [
            "x86_64-manylinux_2_28"
          ]
        },
        {
          "description": "An `x86_64` target for the `manylinux_2_31` platform.",
          "type": "string",
          "enum": [
            "x86_64-manylinux_2_31"
          ]
        },
        {
          "description": "An ARM64 target for the `manylinux_2_17` platform.",
          "type": "string",
          "enum": [
            "aarch64-manylinux_2_17"
          ]
        },
        {
          "description": "An ARM64 target for the `manylinux_2_28` platform.",
          "type": "string",
          "enum": [
            "aarch64-manylinux_2_28"
          ]
        },
        {
          "description": "An ARM64 target for the `manylinux_2_31` platform.",
          "type": "string",
          "enum": [
            "aarch64-manylinux_2_31"
          ]
        }
      ]
    },
    "ToolUvSources": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Sources"
      }
    },
    "ToolUvWorkspace": {
      "type": "object",
      "properties": {
        "exclude": {
          "description": "Packages to exclude as workspace members. If a package matches both `members` and `exclude`, it will be excluded.\n\nSupports both globs and explicit paths.\n\nFor more information on the glob syntax, refer to the [`glob` documentation](https://docs.rs/glob/latest/glob/struct.Pattern.html).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/String"
          }
        },
        "members": {
          "description": "Packages to include as workspace members.\n\nSupports both globs and explicit paths.\n\nFor more information on the glob syntax, refer to the [`glob` documentation](https://docs.rs/glob/latest/glob/struct.Pattern.html).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/String"
          }
        }
      },
      "additionalProperties": false
    },
    "TrustedHost": {
      "description": "A host or host-port pair.",
      "type": "string"
    },
    "TrustedPublishing": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "always",
            "never"
          ]
        },
        {
          "description": "Try trusted publishing when we're already in GitHub Actions, continue if that fails.",
          "type": "string",
          "enum": [
            "automatic"
          ]
        }
      ]
    }
  }
}