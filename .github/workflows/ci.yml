name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUSTUP_MAX_RETRIES: 10
  PYTHON_VERSION: "3.12"

jobs:
  determine_changes:
    name: "Determine changes"
    runs-on: ubuntu-latest
    outputs:
      # Flag that is raised when any code is changed
      code: ${{ steps.changed.outputs.code_any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: tj-actions/changed-files@v44
        id: changed
        with:
          files_yaml: |
            code:
              - "**/*"
              - "!docs/**/*"
              - "!mkdocs.*.yml"
              - "!**/*.md"
              - "!bin/**"
              - "!assets/**"

  # We use the large GitHub actions runners
  # For Ubuntu and Windows, this requires Organization-level configuration
  # See: https://docs.github.com/en/actions/using-github-hosted-runners/about-larger-runners/about-larger-runners#about-ubuntu-and-windows-larger-runners

  cargo-test-linux:
    needs: determine_changes
    if: ${{ github.repository == 'astral-sh/uv' && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}
    runs-on:
      labels: "ubuntu-latest-xlarge"
    name: "cargo test | ubuntu"
    steps:
      - uses: actions/checkout@v4

      - uses: rui314/setup-mold@v1

      - uses: Swatinem/rust-cache@v2

      - name: "Install Rust toolchain"
        run: rustup show

      - name: "Install required Python versions"
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv python install

      - name: "Install cargo nextest"
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: "Cargo test"
        run: |
          cargo nextest run -p uv --test sync sync_relative_wheel

      - name: "Smoke test"
        run: |
          uv="./target/debug/uv"
          $uv venv
          $uv pip install ruff

  cargo-test-windows:
    needs: determine_changes
    if: ${{ github.repository == 'astral-sh/uv' && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}
    runs-on:
      labels: "windows-latest-xlarge"
    name: "cargo test | windows"
    steps:
      - name: Create Dev Drive using ReFS
        run: |
          $Volume = New-VHD -Path C:/uv_dev_drive.vhdx -SizeBytes 14GB |
                    Mount-VHD -Passthru |
                    Initialize-Disk -Passthru |
                    New-Partition -AssignDriveLetter -UseMaximumSize |
                    Format-Volume -FileSystem ReFS -Confirm:$false -Force
          Write-Output $Volume
          Write-Output "DEV_DRIVE=$($Volume.DriveLetter):" >> $env:GITHUB_ENV

      - uses: actions/checkout@v4

      # actions/checkout does not let us clone into anywhere outside ${{ github.workspace }}, so we have to copy the clone...
      - name: Copy Git Repo to Dev Drive
        run: |
          Copy-Item -Path "${{ github.workspace }}" -Destination "${{ env.DEV_DRIVE }}/uv" -Recurse

      # We do not test with Python patch versions on Windows
      # so we can use `setup-python` instead of our bootstrapping code
      # this is much faster on the extremely slow GitHub Windows runners.
      - uses: actions/setup-python@v5
        with:
          python-version: |
            3.8
            3.9
            3.10
            3.11
            3.12

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ env.DEV_DRIVE }}/uv
        env:
          CARGO_HOME: ${{ env.DEV_DRIVE }}/.cargo
          RUSTUP_HOME: ${{ env.DEV_DRIVE }}/.rustup

      - name: "Install Rust toolchain"
        working-directory: ${{ env.DEV_DRIVE }}/uv
        env:
          CARGO_HOME: ${{ env.DEV_DRIVE }}/.cargo
          RUSTUP_HOME: ${{ env.DEV_DRIVE }}/.rustup
        run: rustup show

      - name: "Install cargo nextest"
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
        env:
          CARGO_HOME: ${{ env.DEV_DRIVE }}/.cargo
          RUSTUP_HOME: ${{ env.DEV_DRIVE }}/.rustup

      - name: "Cargo test"
        working-directory: ${{ env.DEV_DRIVE }}/uv
        env:
          CARGO_HOME: ${{ env.DEV_DRIVE }}/.cargo
          RUSTUP_HOME: ${{ env.DEV_DRIVE }}/.rustup
        run: |
          cargo nextest run -p uv --test sync sync_relative_wheel

      - name: "Smoke test"
        working-directory: ${{ env.DEV_DRIVE }}/uv
        env:
          CARGO_HOME: ${{ env.DEV_DRIVE }}/.cargo
          RUSTUP_HOME: ${{ env.DEV_DRIVE }}/.rustup
          # Avoid debug build stack overflows.
          UV_STACK_SIZE: 2000000 # 2 megabyte, double the default on windows
        run: |
          Set-Alias -Name uv -Value ./target/debug/uv
          uv venv
          uv pip install ruff
