# Build and publish Docker images.
#
# Uses Depot for multi-platform builds. Includes both a `uv` base image, which
# is just the binary in a scratch image, and a set of extra, common images with
# the uv binary installed.
#
# Images are built on all runs.
#
# On release, assumed to run as a subworkflow of .github/workflows/release.yml;
# specifically, as a local artifacts job within `cargo-dist`. In this case,
# images are published based on the `plan`.
#
# TODO(charlie): Ideally, the publish step would happen as a publish job within
# `cargo-dist`, but sharing the built image as an artifact between jobs is
# challenging.
name: "Docker images"

on:
  workflow_call:
    inputs:
      plan:
        required: true
        type: string
  pull_request:
    paths:
      # We want to ensure that the maturin builds still work when we change
      # Project metadata
      - pyproject.toml
      - Cargo.toml
      - .cargo/config.toml
      # Toolchain or dependency versions
      - Cargo.lock
      - rust-toolchain.toml
      # The Dockerfile itself
      - Dockerfile
      # And the workflow itself
      - .github/workflows/build-docker.yml

env:
  UV_BASE_IMG: ghcr.io/${{ github.repository_owner }}/uv

jobs:
  docker-plan:
    name: plan
    runs-on: ubuntu-latest
    outputs:
      push: ${{ steps.plan.outputs.push }}
      tag: ${{ steps.plan.outputs.tag }}
      action: ${{ steps.plan.outputs.action }}
    steps:
      - name: Set push variable
        env:
          DRY_RUN: ${{ inputs.plan == '' || fromJson(inputs.plan).announcement_tag_is_implicit }}
          TAG: ${{ inputs.plan != '' && fromJson(inputs.plan).announcement_tag }}
        id: plan
        run: |
          if [ "${{ env.DRY_RUN }}" == "false" ]; then
            echo "push=true" >> "$GITHUB_OUTPUT"
            echo "tag=${{ env.TAG }}" >> "$GITHUB_OUTPUT"
            echo "action=build and publish" >> "$GITHUB_OUTPUT"
          else
            echo "push=false" >> "$GITHUB_OUTPUT"
            echo "tag=dry-run" >> "$GITHUB_OUTPUT"
            echo "action=build" >> "$GITHUB_OUTPUT"
          fi

  docker-publish-base:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}
    name: ${{ needs.docker-plan.outputs.action }} uv
    needs:
      - docker-plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # for Depot OIDC
      packages: write # for GHCR
    environment:
      name: release
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: recursive

      # Login to DockerHub first, to avoid rate-limiting
      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        # PRs from forks don't have access to secrets, disable this step in that case.
        if: ${{ github.event.pull_request.head.repo.full_name == 'astral-sh/uv' }}
        with:
          username: astralshbot
          password: ${{ secrets.DOCKERHUB_TOKEN_RO }}

      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: depot/setup-action@b0b1ea4f69e92ebf5dea3f8713a1b0c37b2126a5

      - name: Check tag consistency
        if: ${{ needs.docker-plan.outputs.push == 'true' }}
        run: |
          version=$(grep "version = " pyproject.toml | sed -e 's/version = "\(.*\)"/\1/g')
          if [ "${{ needs.docker-plan.outputs.tag }}" != "${version}" ]; then
            echo "The input tag does not match the version from pyproject.toml:" >&2
            echo "${{ needs.docker-plan.outputs.tag }}" >&2
            echo "${version}" >&2
            exit 1
          else
            echo "Releasing ${version}"
          fi

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.UV_BASE_IMG }}
          # Defining this makes sure the org.opencontainers.image.version OCI label becomes the actual release version and not the branch name
          tags: |
            type=raw,value=dry-run,enable=${{ needs.docker-plan.outputs.push == 'false' }}
            type=pep440,pattern={{ version }},value=${{ needs.docker-plan.outputs.tag }},enable=${{ needs.docker-plan.outputs.push }}
            type=pep440,pattern={{ major }}.{{ minor }},value=${{ needs.docker-plan.outputs.tag }},enable=${{ needs.docker-plan.outputs.push }}

      - name: Build and push by digest
        id: build
        uses: depot/build-push-action@636daae76684e38c301daa0c5eca1c095b24e780 # v1.14.0
        with:
          project: 7hd4vdzmw5 # astral-sh/uv
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ needs.docker-plan.outputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation for base image
        if: ${{ needs.docker-plan.outputs.push == 'true' }}
        uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2 # v2.2.3
        with:
          subject-name: ${{ env.UV_BASE_IMG }}
          subject-digest: ${{ steps.build.outputs.digest }}

  docker-publish-extra:
    name: ${{ needs.docker-plan.outputs.action }} ${{ matrix.image-mapping }}
    runs-on: ubuntu-latest
    environment:
      name: release
    needs:
      - docker-plan
      - docker-publish-base
    if: ${{ needs.docker-plan.outputs.push == 'true' }}
    permissions:
      packages: write
      attestations: write # needed to push image attestations to the Github attestation store
      id-token: write # needed for signing the images with GitHub OIDC Token
    strategy:
      fail-fast: false
      matrix:
        # Mapping of base image followed by a comma followed by one or more base tags (comma separated)
        # Note, org.opencontainers.image.version label will use the first base tag (use the most specific tag first)
        image-mapping:
          - alpine:3.21,alpine3.21,alpine
          - debian:bookworm-slim,bookworm-slim,debian-slim
          - buildpack-deps:bookworm,bookworm,debian
          - python:3.14-rc-alpine,python3.14-rc-alpine
          - python:3.13-alpine,python3.13-alpine
          - python:3.12-alpine,python3.12-alpine
          - python:3.11-alpine,python3.11-alpine
          - python:3.10-alpine,python3.10-alpine
          - python:3.9-alpine,python3.9-alpine
          - python:3.8-alpine,python3.8-alpine
          - python:3.14-rc-bookworm,python3.14-rc-bookworm
          - python:3.13-bookworm,python3.13-bookworm
          - python:3.12-bookworm,python3.12-bookworm
          - python:3.11-bookworm,python3.11-bookworm
          - python:3.10-bookworm,python3.10-bookworm
          - python:3.9-bookworm,python3.9-bookworm
          - python:3.8-bookworm,python3.8-bookworm
          - python:3.14-rc-slim-bookworm,python3.14-rc-bookworm-slim
          - python:3.13-slim-bookworm,python3.13-bookworm-slim
          - python:3.12-slim-bookworm,python3.12-bookworm-slim
          - python:3.11-slim-bookworm,python3.11-bookworm-slim
          - python:3.10-slim-bookworm,python3.10-bookworm-slim
          - python:3.9-slim-bookworm,python3.9-bookworm-slim
          - python:3.8-slim-bookworm,python3.8-bookworm-slim
    steps:
      # Login to DockerHub first, to avoid rate-limiting
      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        if: ${{ github.event.pull_request.head.repo.full_name == 'astral-sh/uv' }}
        with:
          username: astralshbot
          password: ${{ secrets.DOCKERHUB_TOKEN_RO }}

      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: depot/setup-action@b0b1ea4f69e92ebf5dea3f8713a1b0c37b2126a5

      - name: Generate Dynamic Dockerfile Tags
        shell: bash
        run: |
          set -euo pipefail

          # Extract the image and tags from the matrix variable
          IFS=',' read -r BASE_IMAGE BASE_TAGS <<< "${{ matrix.image-mapping }}"

          # Generate Dockerfile content
          cat <<EOF > Dockerfile
          FROM ${BASE_IMAGE}
          COPY --from=${{ env.UV_BASE_IMG }}:latest /uv /uvx /usr/local/bin/
          ENTRYPOINT []
          CMD ["/usr/local/bin/uv"]
          EOF

          # Initialize a variable to store all tag docker metadata patterns
          TAG_PATTERNS=""

          # Loop through all base tags and append its docker metadata pattern to the list
          # Order is on purpose such that the label org.opencontainers.image.version has the first pattern with the full version
          IFS=','; for TAG in ${BASE_TAGS}; do
            TAG_PATTERNS="${TAG_PATTERNS}type=pep440,pattern={{ version }},suffix=-${TAG},value=${{ needs.docker-plan.outputs.tag }}\n"
            TAG_PATTERNS="${TAG_PATTERNS}type=pep440,pattern={{ major }}.{{ minor }},suffix=-${TAG},value=${{ needs.docker-plan.outputs.tag }}\n"
            TAG_PATTERNS="${TAG_PATTERNS}type=raw,value=${TAG}\n"
          done

          # Remove the trailing newline from the pattern list
          TAG_PATTERNS="${TAG_PATTERNS%\\n}"

          # Export tag patterns using the multiline env var syntax
          {
            echo "TAG_PATTERNS<<EOF"
            echo -e "${TAG_PATTERNS}"
            echo EOF
          } >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        # ghcr.io prefers index level annotations
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: index
        with:
          images: ${{ env.UV_BASE_IMG }}
          flavor: |
            latest=false
          tags: |
            ${{ env.TAG_PATTERNS }}

      - name: Build and push
        id: build-and-push
        uses: depot/build-push-action@636daae76684e38c301daa0c5eca1c095b24e780 # v1.14.0
        with:
          context: .
          project: 7hd4vdzmw5 # astral-sh/uv
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-name: ${{ env.UV_BASE_IMG }}
          subject-digest: ${{ steps.build-and-push.outputs.digest }}

  # Re-tag the base image, to ensure it's shown as the newest on the registry UI
  docker-retag-base:
    name: retag uv
    runs-on: ubuntu-latest
    environment:
      name: release
    needs:
      - docker-plan
      - docker-publish-base
      - docker-publish-extra
    if: ${{ needs.docker-plan.outputs.push == 'true' }}
    steps:
      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push tags
        env:
          IMAGE: ${{ env.UV_BASE_IMG }}
          DIGEST: ${{ needs.docker-publish-base.outputs.image-digest }}
          TAGS: ${{ needs.docker-publish-base.outputs.image-tags }}
        run: |
          docker pull "${IMAGE}@${DIGEST}"
          for tag in $TAGS; do
            docker tag "${IMAGE}@${DIGEST}" "${tag}"
            docker push "${tag}"
          done
