# Publish the uv documentation.
#
# Assumed to run as a subworkflow of .github/workflows/release.yml; specifically, as a post-announce
# job within `cargo-dist`.
name: mkdocs

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "The commit SHA, tag, or branch to publish. Uses the default branch if not specified."
        default: ""
        type: string
  workflow_call:
    inputs:
      plan:
        required: true
        type: string

jobs:
  mkdocs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      MKDOCS_INSIDERS_SSH_KEY_EXISTS: ${{ secrets.MKDOCS_INSIDERS_SSH_KEY != '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: "Set docs version"
        run: |
          version="${{ (inputs.plan != '' && fromJson(inputs.plan).announcement_tag) || inputs.ref }}"
          # if version is missing, exit with error
          if [[ -z "$version" ]]; then
          echo "Can't build versioned docs without a version!"
          exit 1
          fi

          # Use version as display name for now
          display_name="$version"

          echo "version=$version" >> $GITHUB_ENV
          echo "display_name=$display_name" >> $GITHUB_ENV

      - name: "Set branch name"
        run: |
          version="${{ env.version }}"
          display_name="${{ env.display_name }}"
          timestamp="$(date +%s)"

          # create branch_display_name from display_name by replacing all
          # characters disallowed in git branch names with hyphens
          branch_display_name="$(echo "$display_name" | tr -c '[:alnum:]._' '-' | tr -s '-')"

          echo "branch_name=update-docs-$branch_display_name-$timestamp" >> $GITHUB_ENV
          echo "timestamp=$timestamp" >> $GITHUB_ENV

      - name: "Add SSH key"
        if: ${{ env.MKDOCS_INSIDERS_SSH_KEY_EXISTS == 'true' }}
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MKDOCS_INSIDERS_SSH_KEY }}

      - name: "Install Insiders dependencies"
        if: ${{ env.MKDOCS_INSIDERS_SSH_KEY_EXISTS == 'true' }}
        run: pip install -r docs/requirements-insiders.txt

      - name: "Install dependencies"
        if: ${{ env.MKDOCS_INSIDERS_SSH_KEY_EXISTS != 'true' }}
        run: pip install -r docs/requirements.txt

      - name: "Build Insiders docs"
        if: ${{ env.MKDOCS_INSIDERS_SSH_KEY_EXISTS == 'true' }}
        run: mkdocs build --strict -f mkdocs.insiders.yml

      - name: "Build docs"
        if: ${{ env.MKDOCS_INSIDERS_SSH_KEY_EXISTS != 'true' }}
        run: mkdocs build --strict -f mkdocs.public.yml

      - name: "Add SSH key"
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ASTRAL_DOCS_SSH_KEY }}

      - name: "Clone repo"
        run: |
          version="${{ env.version }}"
          git clone https://github.com/astral-sh/docs.git astral-docs

      - name: "Copy docs"
        run: rm -rf astral-docs/uv && cp -r site/uv astral-docs/uv

      - name: "Commit docs"
        working-directory: astral-docs
        run: |
          branch_name="${{ env.branch_name }}"

          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions-bot@example.com"

          git checkout -b $branch_name
          git add uv
          git commit -m "Update uv documentation for $version"

      - name: "Create Pull Request"
        working-directory: astral-docs
        run: |
          version="${{ env.version }}"
          display_name="${{ env.display_name }}"
          branch_name="${{ env.branch_name }}"

          # set the PR title
          pull_request_title="Update documentation for $display_name"

          # authenticate with GitHub
          echo ${{ secrets.ASTRAL_DOCS_PAT}} | gh auth login --with-token

          # Delete any existing pull requests that are open for this version
          # by checking against pull_reqeust_title because the new PR will
          # supersede the old one.
          gh pr list --state open --json title --jq '.[] | select(.title == "$pull_request_title") | .number' | \
            xargs -I {} gh pr close {}

          # push the branch to GitHub
          git push origin $branch_name

          # create the PR
          gh pr create --base main --head $branch_name \
            --title "$pull_request_title" \
            --body "Automated documentation update for $display_name" \
            --label "documentation"
